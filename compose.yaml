version: '3.8'
networks:
  network2:

services:
  mysql:
    image: mysql:latest
    container_name: my-mysql
    volumes:
      - mysql_data:/var/lib/mysql
      - ./data/mysql_backup:/backup
      - ./data/bots:/var/lib/mysql-files/
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - network2

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - '80:80'
      - '443:443'
    restart: always
    volumes:
      - ./data/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/nginx/www:/var/www
      - ./data/nginx/logs/nginx:/var/log/nginx
#      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
    depends_on:
      - mysql
      - phpmyadmin
      - app
    networks:
      - network2

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_NO_CACHE: 1
    restart: always
#    ports:
#      - '8080:8080'
    depends_on:
      - mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      BOT_TOKEN: ${BOT_TOKEN}
      BOT_USERNAME: ${BOT_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_USERNAME: ${MAIL_USERNAME}
      DATABASE_URL: ${DATABASE_URL}
    env_file:
      - .env
    networks:
      - network2

  phpmyadmin:
    image: phpmyadmin:latest
    ports:
      - "6571:80"
#    environment:
#      PMA_PORT: 90
    volumes:
      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
      - ./data/phpmyadmin/apache2.conf:/etc/apache2/conf-available/servername.conf
    environment:
      - PMA_HOST=mysql
      - UPLOAD_LIMIT=512M
    depends_on:
      - mysql
    command: /bin/sh -c "chmod 644 /etc/phpmyadmin/config.inc.php && apache2-foreground"
    networks:
      - network2


volumes:
  mysql_data:



  #  docker exec -i my-mysql mysqldump -uhunt -pRkfql54532111 otziv > /docker/backup-otziv.sql
#  docker exec -i d7a0df4ea753 mysqldump -uhunt -pRkfql54532111 otziv > /docker/backup-otziv.sql

  #  на сервере удаление старого файла и установка нового архива БД
  #  docker exec -i my-mysql mysql -uhunt -pRkfql54532111 otziv < /backup/backup-otziv.sql
  #  docker exec -i my-mysql mysql -uhunt -pRkfql54532111 otziv < /docker/backup-otziv.sql
  #  docker exec -i my-mysql mysql -uhunt -pRkfql54532111 otziv < /docker/data/mysql_backup/backup-otziv.sql




  #  mysql:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile.mysql
  #    container_name: mymysql
  #    volumes:
  #      - mysql_data:/var/lib/mysql
  #      - ./data/mysql/my.cnf:/etc/my.cnf:ro
  #      - ./data/mysql_backup:/backup
  #    restart: always
  #    ports:
  #      - '3306:3306'
  #    environment:
  #      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #      MYSQL_DATABASE: ${MYSQL_DATABASE}
  #      MYSQL_USER: ${MYSQL_USER}
  #      MYSQL_PASSWORD: ${MYSQL_PASSWORD}










        #  mysql:
        #    image: mysql:latest
        #    container_name: mymysql
        #    volumes:
        #      - mysql_data:/var/lib/mysql
        #      - ./data/mysql/my.cnf:/etc/my.cnf:ro
        #      - ./data/share:/share
        #      - ./data/mysql_backup:/backup  # новая директория для бэкапов
        #    restart: always
        #    ports:
        #      - '3306:3306'
        #    environment:
        #      MYSQL_ROOT_PASSWORD: Rkfql54532111
        #      MYSQL_DATABASE: otziv
        #      MYSQL_USER: hunt
        #      MYSQL_PASSWORD: Rkfql54532111
        #      command: >
        #        bash -c "
        #          (crontab -l 2>/dev/null;
        #          echo '0 3 * * * mysqldump -uhunt -pRkfql54532111 otziv > /backup/backup-otziv-\$(date +\%Y\%m\%d).sql') | crontab -"
        #      command: >
        #        bash -c "
        #          apk update &&
        #          apk add mariadb-client &&
        #          exec mysqld --innodb-flush-method=O_DIRECT"
        #        # Устанавливаем права доступа к файлу my.cnf
        # Устанавливаем права доступа к файлу my.cnf
        #    command: ["--innodb-flush-method=O_DIRECT"]
        #  mysqldump -uroot -pRkfql54532111 otziv > /share/backup-otziv.sql
      #  mysqldump -uhunt -pRkfql54532111 otziv > /backup/backup-otziv.sql


#      command: >
#        /bin/sh -c "
#        chmod 644 /etc/phpmyadmin/config.inc.php &&
#        apache2-foreground"


#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: Rkfql54532111
#      MYSQL_USER: hunt
#      MYSQL_PASSWORD: Rkfql54532111
#      file_mode: "0644"  # Установите права доступа по вашему выбору, например, 0644
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php





#    - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
#    - MYSQL_DATABASE=${MYSQL_DATABASE}
#    - MYSQL_USER=${MYSQL_USER}
#    - MYSQL_PASSWORD=${MYSQL_PASSWORD}
#    - BOT_TOKEN=${BOT_TOKEN}
#    - BOT_USERNAME=${BOT_USERNAME}
#    - MAIL_PASSWORD=${MAIL_PASSWORD}
#    - MAIL_USERNAME=${MAIL_USERNAME}
#version: '3.9'
#networks:
#  network2:
#
#services:
#  mysql:
#    image: mysql:latest
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      MYSQL_INNODB_LOG_FILE_SIZE: "100MB"
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#    restart: always
#    networks:
#      - network2
#
#  nginx:
#    image: nginx:latest
#    ports:
#      - '80:80'
#      - '443:443'
#    restart: always
#    volumes:
#      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/nginx/www:/var/www
#      - ./data/nginx/logs/nginx:/var/log/nginx
#      - ./data/proxy_cache:/var/lib/nginx/proxy_cache
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#    depends_on:
#      - app
#      - mysql
#    networks:
#      - network2
#
#  app:
#    image: claid38/otziv-app
#    restart: always
#    depends_on:
#      - mysql
#    environment:
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      BOT_TOKEN: ${BOT_TOKEN}
#      BOT_USERNAME: ${BOT_USERNAME}
#      MAIL_PASSWORD: ${MAIL_PASSWORD}
#      MAIL_USERNAME: ${MAIL_USERNAME}
#    networks:
#      - network2
#
#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '6571:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
#    networks:
#      - network2
#
#volumes:
#  mysql_data:



#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}


#    network_mode: "host"

#networks:
#  mynetwork:
#    driver: host





#




#networks:
#  mynetwork:
#    driver: bridge






#version: '3'
#
#services:
#  mysql:
#    image: mysql:latest
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      MYSQL_INNODB_LOG_FILE_SIZE: "100MB"
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#    restart: always
#    ports:
#      - '3306:3306'
#
#  nginx:
#    image: nginx:latest
#    ports:
#      - '80:80'
#      - '443:443'
#    restart:
#      always
#    volumes:
#      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/nginx/www:/var/www
#      - ./data/nginx/logs/nginx:/var/log/nginx
#      - ./data/proxy_cache:/var/lib/nginx/proxy_cache
#
#      # nginx должен общаться с php контейнером
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#    links:
#      - app
#
#  app:
#    image: claid38/otziv-app
#    ports:
#      - "8080:8080"
#    restart: always
#    depends_on:
#      - mysql
#    environment:
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#
#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
#
#volumes:
#  mysql_data:


























#version: '3'
#
#services:
#  mysql:
#    image: mysql:latest
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#    restart: always
#    ports:
#      - '3306:3306'
#
#
#  nginx:
#    image: nginx:latest
#    ports:
#      - '80:80'
#      - '443:443'
#    restart:
#      always
#    volumes:
#      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./data/nginx/o-ogo.crt:/etc/ssl
#      - ./data/nginx/ca.crt:/etc/ssl
#      - ./data/nginx/o-ogo.key:/etc/ssl
#      - ./data/nginx/www:/var/www
#      - ./data/nginx/logs/nginx:/var/log/nginx
##      - ./data/certbot/conf:/etc/letsencrypt
##      - ./data/certbot/www:/var/www/certbot
#      # nginx должен общаться с php контейнером
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#    depends_on:
#      - app
#      - phpmyadmin
#    links:
#      - app
#      - phpmyadmin
#
#
#  app:
#    build:
#      context: src
#      dockerfile: Dockerfile
#      args:
#        BUILD_NO_CACHE: 1
#    ports:
#      - "8080:8080"
#    environment:
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    restart: always
#    depends_on:
#      - mysql
#
#
#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
#
#volumes:
#  mysql_data:


#  certbot:
#    image: certbot/certbot
#    restart: unless-stopped
#    volumes:
#      - ./data/certbot/conf:/etc/letsencrypt
#      - ./data/certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


#  adminer:
#    image: adminer:latest
#    restart: always
#    ports:
#        - '8090:8080'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

#    network_mode: "host"

#networks:
#  mynetwork:
#    driver: host





#




#networks:
#  mynetwork:
#    driver: bridge









#services:
#  mysql:
#    image: mysql:latest
#    environment:
#      - MYSQL_DATABASE=otziv
#      - MYSQL_PASSWORD=545321
#      - MYSQL_ROOT_PASSWORD=root_password
#      - MYSQL_USER=hunt
#    restart: always
#    ports:
#      - '3306'
#  adminer:
#    image: adminer
#    restart: always
#    ports:
#        - '8080:8080'
#  api:
#    build: .
#    depends_on:
#      - mysql
#    environment:
#      SPRING_PROFILES_ACTIVE: application-server
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/otziv?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DB_USER: root
#      DB_PASSWORD: password


#      - SPRING_PROFILES_ACTIVE=production
#      - SERVER_PORT=8080
#      - JWT_SECRET=SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
#      - JWT_LIFETIME=5m
#      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=com.mysql.cj.jdbc.Driver
#      - SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/otziv
#      - SPRING_DATASOURCE_USERNAME=hunt
#      - SPRING_DATASOURCE_PASSWORD=545321
#      - SPRING_JPA_HIBERNATE_DDL-AUTO=validate
#      - SPRING_JPA_SHOW-SQL=true
#      - FLYWAY_BASELINE-ON-MIGRATE=true
#    ports:
#      - "8080:8080"