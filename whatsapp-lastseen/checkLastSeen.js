const puppeteer = require('puppeteer');
const fs = require('fs');
const express = require('express');

const PHONE_FILE = 'phones.txt';
const OUTPUT_FILE = 'online_seen.json';
const DELAY_MS = 15000;
let lastQrData = null;

async function delay(ms) {
    return new Promise(res => setTimeout(res, ms));
}

async function getLastSeenForNumber(page, phone) {
    const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
    await page.goto(url, { waitUntil: 'domcontentloaded' });

    try {
        await page.waitForSelector('header span[title]', { timeout: 10000 });

        const status = await page.evaluate(() => {
            const spanElements = document.querySelectorAll('header span');
            for (const el of spanElements) {
                const text = el.textContent.toLowerCase();
                if (text.includes('–≤ —Å–µ—Ç–∏') || text.includes('–±—ã–ª') || text.includes('online') || text.includes('last seen')) {
                    return el.textContent;
                }
            }
            return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        });

        return status;
    } catch (err) {
        return '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å';
    }
}

async function tryGetQR(page) {
    let lastHash = null;
    let stuckCounter = 0;

    for (let i = 0; i < 30; i++) {
        const qrData = await page.evaluate(() => {
            const canvas = document.querySelector('canvas');
            if (!canvas) return null;
            return canvas.toDataURL();
        });

        if (qrData) {
            const currentHash = qrData.slice(100, 120);
            if (currentHash !== lastHash) {
                lastHash = currentHash;
                stuckCounter = 0;
                lastQrData = qrData.replace(/^data:image\/png;base64,/, '');
                console.log(`üîÑ –û–±–Ω–æ–≤–∏–ª—Å—è QR-–∫–æ–¥ [${currentHash}]`);
            } else {
                stuckCounter++;
                if (stuckCounter >= 5) {
                    console.warn(`‚ö†Ô∏è QR-–∫–æ–¥ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —É–∂–µ ${stuckCounter} –ø–æ–ø—ã—Ç–æ–∫!`);
                }
            }
        } else {
            console.log('‚è≥ QR-–∫–æ–¥ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...');
        }

        if (lastQrData) break;
        await delay(1000);
    }

    if (!lastQrData) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥');
    }
}

async function waitForAuthorization(page) {
    console.log('üì± –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    try {
        await page.waitForFunction(() => {
            return !document.querySelector('canvas') &&
                !!document.querySelector('[data-testid="chat-list-search"]');
        }, { timeout: 60000 });
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return true;
    } catch (err) {
        console.error('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: —Ç–∞–π–º–∞—É—Ç');
        return false;
    }
}

async function runChecker() {
    const phones = fs.readFileSync(PHONE_FILE, 'utf8')
        .split('\n')
        .map(p => p.trim())
        .filter(p => p.length > 0);

    const browser = await puppeteer.launch({
        headless: 'new',
        executablePath: '/usr/bin/google-chrome-stable',
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        userDataDir: './whatsapp-session',
        defaultViewport: null
    });

    const page = await browser.newPage();

    await page.goto('https://web.whatsapp.com');
    console.log('üåê –û—Ç–∫—Ä—ã—Ç WhatsApp Web, –∏—â–µ–º QR...');

    await tryGetQR(page);
    const success = await waitForAuthorization(page);

    if (!success) {
        await browser.close();
        process.exit(1);
    }

    const results = {};

    for (const phone of phones) {
        console.log(`üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞: ${phone}`);
        const status = await getLastSeenForNumber(page, phone);
        console.log(`‚Üí –°—Ç–∞—Ç—É—Å: ${status}`);
        results[phone] = status;
        await delay(DELAY_MS);
    }

    fs.writeFileSync(OUTPUT_FILE, JSON.stringify(results, null, 2), 'utf8');
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${OUTPUT_FILE}`);

    await browser.close();
}

// === Express QR —Å–µ—Ä–≤–µ—Ä ===
const expressApp = express();

expressApp.get('/qr', async (req, res) => {
    if (!lastQrData) {
        return res.status(404).send('<h2>QR-–∫–æ–¥ –µ—â—ë –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</h2>');
    }
    const imgSrc = `data:image/png;base64,${lastQrData}`;
    res.send(`<html><body><h2>QR-–∫–æ–¥</h2><img src="${imgSrc}" /></body></html>`);
});

expressApp.listen(3000, () => {
    console.log(`üü¢ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000/qr`);
});

runChecker().catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', err.message);
    process.exit(1);
});


