const { Client, LocalAuth } = require('whatsapp-web.js');
const puppeteer = require('puppeteer');
const qrcodeTerminal = require('qrcode-terminal');
const qrcode = require('qrcode');
const express = require('express');
const bodyParser = require('body-parser');

const clientId = process.env.CLIENT_ID || 'default';
const path = require('path');
const os = require('os');
const dataPath = process.env.AUTH_PATH || path.join(os.homedir(), '.wwebjs_auth');
const qrStore = {};
let client;

const makeClient = (id) => {
  const instance = new Client({
    authStrategy: new LocalAuth({
      clientId: id,
      dataPath: dataPath
    }),
    puppeteer: {
      headless: true,
      executablePath: puppeteer.executablePath(), // ‚úÖ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –ª—é–±–æ–π –û–°
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
  });

  instance.on('qr', qr => {
    qrStore[id] = qr;
    console.log(`[${id}] QR-–∫–æ–¥ (—Ç–µ—Ä–º–∏–Ω–∞–ª):`);
    qrcodeTerminal.generate(qr, { small: true });
  });

  instance.on('authenticated', () => {
    console.log(`[${id}] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  });

  instance.on('ready', () => {
    console.log(`[${id}] üî• –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤`);
  });

  instance.on('message', msg => {
    console.log(`[${id}] –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from}: ${msg.body}`);
  });

  instance.initialize();
  return instance;
};

client = makeClient(clientId);

const app = express();
app.use(bodyParser.json());

app.get('/qr', async (req, res) => {
  const qrData = qrStore[clientId];
  if (!qrData) return res.status(404).send('QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');

  const qrImage = await qrcode.toDataURL(qrData);
  res.send(`
    <html>
      <head><title>QR-–∫–æ–¥</title></head>
      <body>
        <h2>QR-–∫–æ–¥ –¥–ª—è ${clientId}</h2>
        <img src="${qrImage}" />
      </body>
    </html>
  `);
});

app.post('/send', async (req, res) => {
  const { phone, message } = req.body;
  if (!client || !client.info || !client.info.wid) {
    return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    await client.sendMessage(`${phone}@c.us`, message);
    res.json({ status: 'ok' });
  } catch (e) {
    res.status(500).json({ status: 'error', error: e.message });
  }
});

app.listen(3000, () => {
  console.log(`üü¢ API –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000 –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
});
