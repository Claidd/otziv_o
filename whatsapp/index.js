const userAgents = [
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.107 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.128 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.224 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.163 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.5993.145 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.5845.98 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36",
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.198 Safari/537.36"
];

function getDesktopEmulationProfile(userAgent) {
  const profiles = [
    {
      regex: /Chrome\/123\.0\./i,
      viewport: { width: 1366, height: 768, deviceScaleFactor: 1 },
      platform: 'Win32',
      renderer: 'ANGLE (NVIDIA GeForce GTX 1650 Direct3D11 vs_5_0 ps_5_0)',
      vendor: 'Google Inc.'
    },
    {
      regex: /Chrome\/122\.0\./i,
      viewport: { width: 1440, height: 900, deviceScaleFactor: 1 },
      platform: 'Win32',
      renderer: 'ANGLE (Intel UHD Graphics 620 Direct3D11 vs_5_0 ps_5_0)',
      vendor: 'Google Inc.'
    },
    {
      regex: /Chrome\/121\.0\./i,
      viewport: { width: 1920, height: 1080, deviceScaleFactor: 1 },
      platform: 'Win32',
      renderer: 'ANGLE (AMD Radeon RX 580 Direct3D11 vs_5_0 ps_5_0)',
      vendor: 'Google Inc.'
    },
    {
      regex: /Chrome\/120\.0\./i,
      viewport: { width: 1600, height: 900, deviceScaleFactor: 1 },
      platform: 'Win32',
      renderer: 'ANGLE (NVIDIA Quadro T1000 Direct3D11 vs_5_0 ps_5_0)',
      vendor: 'Google Inc.'
    },
    {
      regex: /Chrome\/119\.0\./i,
      viewport: { width: 1280, height: 720, deviceScaleFactor: 1 },
      platform: 'Win32',
      renderer: 'ANGLE (Intel Iris Xe Graphics Direct3D11 vs_5_0 ps_5_0)',
      vendor: 'Google Inc.'
    }
  ];

  for (const profile of profiles) {
    if (profile.regex.test(userAgent)) return profile;
  }
  return {
    viewport: { width: 1366, height: 768, deviceScaleFactor: 1 },
    platform: 'Win32',
    renderer: 'ANGLE (Intel UHD Graphics 620 Direct3D11 vs_5_0 ps_5_0)',
    vendor: 'Google Inc.'
  };
}
const { Client, LocalAuth } = require('whatsapp-web.js');
const puppeteer = require('puppeteer');
const qrcodeTerminal = require('qrcode-terminal');
const qrcode = require('qrcode');
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const path = require('path');
const os = require('os');
const fs = require('fs');
const fsExtra = require('fs-extra');

// –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω–æ–≤ (–ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Docker volume)
const localScreenshotDir = '/app/screenshots';
fsExtra.ensureDirSync(localScreenshotDir);


const proxyArg = process.env.PROXY_URL ? [`--proxy-server=${process.env.PROXY_URL}`] : [];
const clientId = process.env.CLIENT_ID || 'default';
const serverUrl = process.env.SERVER_URL || 'http://localhost:8080';
const dataPath = process.env.AUTH_PATH || path.join(os.homedir(), '.wwebjs_auth');
const qrStore = {};
let client;
let globalUserAgent = null;
let lastRestart = 0;

// --- –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç (—Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏) ---
async function applyAntiDetect(page) {
  try {
    const profile = getDesktopEmulationProfile(globalUserAgent || userAgents[0]);
    await page.setViewport(profile.viewport);

    await page.evaluateOnNewDocument((vendor, renderer, platform) => {
      Object.defineProperty(navigator, 'webdriver', { get: () => false });
      Object.defineProperty(navigator, 'platform', { get: () => platform });
      const origGetParameter = WebGLRenderingContext.prototype.getParameter;
      WebGLRenderingContext.prototype.getParameter = function (param) {
        if (param === 37445) return vendor;    // UNMASKED_VENDOR_WEBGL
        if (param === 37446) return renderer;  // UNMASKED_RENDERER_WEBGL
        return origGetParameter.call(this, param);
      };
      document.addEventListener('mousemove', () => {}, { once: true });
      document.addEventListener('keydown', () => {}, { once: true });
      navigator.mediaDevices = {
        enumerateDevices: async () => ([
          { kind: "audioinput", label: "–ú–∏–∫—Ä–æ—Ñ–æ–Ω", deviceId: "default" },
          { kind: "videoinput", label: "–ö–∞–º–µ—Ä–∞", deviceId: "default" }
        ])
      };
    }, profile.vendor, profile.renderer, profile.platform);

    await page.mouse.move(100 + Math.random() * 300, 100 + Math.random() * 300);
    await page.mouse.wheel({ deltaY: 50 + Math.random() * 150 });
    await page.waitForTimeout(2000 + Math.random() * 3000);
  } catch (err) {
    console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –≤ applyAntiDetect:`, err.message);
  }
}

// --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ evaluate ---
async function safeEvaluate(page, fn, ...args) {
  try {
    return await page.evaluate(fn, ...args);
  } catch (e) {
    if (e.message.includes('Execution context was destroyed')) {
      throw e; // –ø—É—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    }
    throw e;
  }
}

// --- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (html/png) ---
function cleanupScreenshots(dir = localScreenshotDir, maxFiles = 500) {
  try {
    const files = fs.readdirSync(dir)
        .map(f => ({
          name: f,
          time: fs.statSync(path.join(dir, f)).mtime.getTime()
        }))
        .sort((a, b) => a.time - b.time);
    if (files.length > maxFiles) {
      const toDelete = files.slice(0, files.length - maxFiles);
      for (const file of toDelete) {
        fs.unlinkSync(path.join(dir, file.name));
      }
      console.log(`[${clientId}] üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ ${toDelete.length} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤`);
    }
  } catch (err) {
    console.error(`[${clientId}] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∫—Ä–∏–Ω–æ–≤:`, err.message);
  }
}

// --- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∫—Ä–∞—à–∞—Ö ---
process.on('uncaughtException', (err) => {
  if (err.message.includes('Execution context was destroyed')) {
    console.error(`[${clientId}] üí• Puppeteer –∫—Ä–∞—à: ${err.message}`);
    restartClientWithDelay(5000);
  } else {
    console.error(`[${clientId}] ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:`, err);
  }
});

function restartClientWithDelay(ms = 5000) {
  const now = Date.now();
  if (now - lastRestart < 60000) {
    console.warn(`[${clientId}] üö´ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –Ω–µ –ø—Ä–æ—à–ª–æ 60 —Å–µ–∫.`);
    return;
  }
  lastRestart = now;
  console.warn(`[${clientId}] üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ ${ms / 1000} —Å–µ–∫.`);
  setTimeout(() => {
    try {
      client?.destroy()?.catch(() => {});
    } catch (_) {}
    client = null;
    makeClient(clientId);
  }, ms);
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ---
const makeClient = (id) => {
  if (client) return client;
  const uaPath = path.join(dataPath, `${id}_ua.json`);

  let selectedUserAgent, selectedProfile;
  if (fs.existsSync(uaPath)) {
    const saved = JSON.parse(fs.readFileSync(uaPath, 'utf-8'));
    selectedUserAgent = saved.userAgent;
    globalUserAgent = selectedUserAgent;
    selectedProfile = saved.profile;
    console.log(`[${id}] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π User-Agent`);
  } else {
    selectedUserAgent = userAgents[Math.floor(Math.random() * userAgents.length)];
    globalUserAgent = selectedUserAgent;
    selectedProfile = getDesktopEmulationProfile(selectedUserAgent);
    fs.writeFileSync(uaPath, JSON.stringify({ userAgent: selectedUserAgent, profile: selectedProfile }, null, 2));
    console.log(`[${id}] üÜï –°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π User-Agent`);
  }

  const instance = new Client({
    authStrategy: new LocalAuth({ clientId: id, dataPath }),
    puppeteer: {
      headless: true,
      executablePath: puppeteer.executablePath(),
      timeout: 60000,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        `--user-agent=${selectedUserAgent}`,
        ...proxyArg
      ]
    }
  });

  instance.on('browser', async (browser) => {
    console.log(`[${clientId}] üß† –ë—Ä–∞—É–∑–µ—Ä –ø–æ–¥–∫–ª—é—á—ë–Ω`);
    try {
      const pages = await browser.pages();
      const page = pages.length ? pages[0] : await browser.newPage();
      client.pupPage = page;

      await applyAntiDetect(page); // –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

      browser.on('targetcreated', async target => {
        const newPage = await target.page();
        if (newPage) {
          console.log(`[${clientId}] üïµÔ∏è –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏`);
          await applyAntiDetect(newPage);
        }
      });
    } catch (e) {
      console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, e.message);
    }
  });

  instance.on('qr', qr => {
    qrStore[id] = qr;
    console.log(`[${id}] QR-–∫–æ–¥ (—Ç–µ—Ä–º–∏–Ω–∞–ª):`);
    qrcodeTerminal.generate(qr, { small: true });
  });

  instance.on('authenticated', () => console.log(`[${id}] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`));
  instance.on('ready', () => console.log(`[${id}] üî• –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤`));
  instance.on('disconnected', (reason) => {
    console.warn(`[${id}] ‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω: ${reason}`);
    restartClientWithDelay();
  });
  instance.on('change_state', state => {
    if (state === 'DISCONNECTED') {
      console.warn(`[${id}] ‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
      restartClientWithDelay();
    }
  });

  instance.initialize();
  return instance;
};

client = makeClient(clientId);

const app = express();
app.use(bodyParser.json());



// ==== QR-–∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ ====
app.get('/qr', async (req, res) => {
  const qrData = qrStore[clientId];
  if (!qrData) {
    return res.send(`<html><body>
      <h2>QR-–∫–æ–¥ –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}</h2>
      <p>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 5-10 —Å–µ–∫—É–Ω–¥.</p>
    </body></html>`);
  }
  const qrImage = await qrcode.toDataURL(qrData);
  res.send(`<html><body style="text-align:center;">
    <h2>QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}</h2>
    <img src="${qrImage}" style="max-width:400px;" />
  </body></html>`);
});

// –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/send', async (req, res) => {
  const { phone, message } = req.body;
  if (!client || !client.info || !client.info.wid) {
    return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤' });
  }

  try {
    const numberId = await client.getNumberId(phone);
    if (!numberId) {
      console.warn(`[${clientId}] ‚ùå –ù–æ–º–µ—Ä ${phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp`);
      return res.status(400).json({ status: 'not_whatsapp', error: '–ù–æ–º–µ—Ä –Ω–µ –≤ WhatsApp' });
    }

    console.log(`[${clientId}] ‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ ${phone}: "${message}"`);
    await client.sendMessage(numberId._serialized, message);
    console.log(`[${clientId}] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${phone}`);
    res.json({ status: 'ok' });

  } catch (e) {
    const errorMessage = e?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${phone}: ${errorMessage}`);
    res.status(500).json({ status: 'error', error: errorMessage });
  }
});

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

client.on('message', async msg => {
  const chat = await msg.getChat();

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)
  if (msg.type !== 'chat') {
    console.log(`[${clientId}] üì∑ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (${msg.type}) –æ—Ç ${msg.from}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.`);
    return;
  }

  const content = msg.body?.trim();
  if (!content) return;

  const from = msg.from.replace('@c.us', '');

  if (chat.isGroup) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –±–µ–∑ "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ")
    const groupId = chat.id._serialized;
    const senderId = msg.author;
    const senderNumber = senderId?.replace('@c.us', '') || 'unknown';

    console.log(`üì® [${clientId}] –ì—Ä—É–ø–ø–∞: ${chat.name}`);
    console.log(`üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${senderNumber}`);
    console.log(`üí¨ –¢–µ–∫—Å—Ç: ${content}`);

    try {
      const response = await axios.post(`${serverUrl}/webhook/whatsapp-group-reply`, {
        clientId,
        groupId,
        groupName: chat.name,
        from: senderNumber,
        message: content
      });
      console.log(`[${clientId}] üì§ –í–µ–±—Ö—É–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: —Å—Ç–∞—Ç—É—Å ${response.status}`);
    } catch (err) {
      console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã: ${err.message}`);
      if (err.response) {
        console.error(`[${clientId}] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${err.response.status} ${err.response.statusText}`);
        console.error(`[${clientId}] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(err.response.data)}`);
      }
    }

  } else {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–º–µ—Ç–∫–æ–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
    console.log(`[${clientId}] üì• –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${content}`);

    const delayBeforeRead = Math.floor(Math.random() * 25000) + 5000; // 5‚Äì30 —Å–µ–∫—É–Ω–¥
    console.log(`[${clientId}] ‚è≥ –ñ–¥—ë–º ${delayBeforeRead} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–º–µ—Ç–∫–æ–π "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"...`);
    await delay(delayBeforeRead);

    try {
      await chat.sendSeen();
      console.log(`[${clientId}] ‚úÖ –ü–æ–º–µ—Ç–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
    } catch (err) {
      console.error(`[${clientId}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: ${err.message}`);
    }

    try {
      const response = await axios.post(`${serverUrl}/webhook/whatsapp-reply`, {
        clientId,
        from,
        message: content
      });
      console.log(`[${clientId}] üì§ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: —Å—Ç–∞—Ç—É—Å ${response.status}`);
    } catch (err) {
      console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: ${err.message}`);
      if (err.response) {
        console.error(`[${clientId}] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${err.response.status} ${err.response.statusText}`);
        console.error(`[${clientId}] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(err.response.data)}`);
      }
    }
  }
});


// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
// const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
//
// client.on('message', async msg => {
//   const chat = await msg.getChat();
//
//   // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)
//   if (msg.type !== 'chat') {
//     console.log(`[${clientId}] üì∑ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (${msg.type}) –æ—Ç ${msg.from}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.`);
//     return;
//   }
//
//   const content = msg.body?.trim();
//   if (!content) return;
//
//   const from = msg.from.replace('@c.us', '');
//
//   if (chat.isGroup) {
//     // –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –±–µ–∑ markAsRead)
//     const groupId = chat.id._serialized;
//     const senderId = msg.author;
//     const senderNumber = senderId?.replace('@c.us', '') || 'unknown';
//
//     console.log(`üì® [${clientId}] –ì—Ä—É–ø–ø–∞: ${chat.name}`);
//     console.log(`üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${senderNumber}`);
//     console.log(`üí¨ –¢–µ–∫—Å—Ç: ${content}`);
//
//     try {
//       await axios.post(`${serverUrl}/webhook/whatsapp-group-reply`, {
//         clientId,
//         groupId,
//         groupName: chat.name,
//         from: senderNumber,
//         message: content
//       });
//       console.log(`[${clientId}] üì§ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã ${chat.name}`);
//     } catch (err) {
//       console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã: ${err.message}`);
//     }
//
//   } else {
//     // –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–º–µ—Ç–∫–æ–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
//     console.log(`[${clientId}] üì• –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${content}`);
//
//     const delayBeforeRead = Math.floor(Math.random() * 25000) + 5000; // 5‚Äì30 —Å–µ–∫
//     await delay(delayBeforeRead);
//
//     try {
//       const chat = await msg.getChat();
//       await chat.sendSeen(); // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
//       console.log(`[${clientId}] ‚úÖ –ü–æ–º–µ—Ç–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
//     } catch (err) {
//       console.error(`[${clientId}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: ${err.message}`);
//     }
//
//
//     try {
//       const response = await axios.post(`${serverUrl}/webhook/whatsapp-reply`, {
//         clientId,
//         from,
//         message: content
//       });
//       console.log(`[${clientId}] üì§ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: —Å—Ç–∞—Ç—É—Å ${response.status}`);
//     } catch (err) {
//       console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: ${err.message}`);
//       if (err.response) {
//         console.error(`[${clientId}] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${err.response.status} ${err.response.statusText}`);
//         console.error(`[${clientId}] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(err.response.data)}`);
//       }
//     }
//
//   }
// });


app.post('/send-group', async (req, res) => {
  const { groupId, message } = req.body;

  if (!groupId || !message) {
    return res.status(400).json({ status: 'error', error: 'groupId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  if (!/^\d+@g\.us$/.test(groupId)) {
    return res.status(400).json({ status: 'error', error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç groupId' });
  }

  let attempts = 0;
  let success = false;
  let lastError = '';

  while (attempts < 3 && !success) {
    attempts++;

    if (!client || !client.info) {
      console.warn(`[${clientId}] üö´ –ö–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/3) ‚Äî –∂–¥—É 5 —Å–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—è—é...`);
      await delay(5000);
      continue;
    }

    try {
      let chat;
      try {
        chat = await client.getChatById(groupId);
      } catch (e) {
        console.warn(`[${clientId}] ‚ö†Ô∏è –ß–∞—Ç ${groupId} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã`);
      }

      if (!chat) {
        const allChats = await client.getChats();  // –∫–ª–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        chat = allChats.find(c => c.id._serialized === groupId);
      }

      if (!chat || !chat.isGroup) {
        return res.status(404).json({ status: 'error', error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
      }

      console.log(`[${clientId}] ‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É ${groupId}: "${message}"`);
      await chat.sendStateTyping();
      await delay(1500);

      const sentMsg = await client.sendMessage(groupId, message);
      if (!sentMsg?.id) {
        console.warn(`[${clientId}] ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ ID –ø—É—Å—Ç–æ–π (–≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)`);
      }

      console.log(`[${clientId}] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É ${groupId}`);
      success = true;
      return res.json({ status: 'ok', attempts });

    } catch (e) {
      lastError = e.message;
      console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É ${groupId} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/3):`, lastError);
      if (attempts < 3) {
        console.log(`[${clientId}] üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
        await delay(5000);
      }
    }
  }

  // –ï—Å–ª–∏ 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏
  res.status(500).json({
    status: 'error',
    error: lastError || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    attempts
  });
});






app.get('/health', async (req, res) => {
  try {
    const info = await client.getState();
    return res.status(200).json({ status: info });
  } catch (e) {
    return res.status(500).json({ status: 'DISCONNECTED', error: e.message });
  }
})





const sanitizeFileName = str => str.replace(/[^\w.-]/g, '_');


// --- –ü–∞—Ä—Å–µ—Ä –¥–∞—Ç ---
const months = {
  —è–Ω–≤–∞—Ä—è: 0, —Ñ–µ–≤—Ä–∞–ª—è: 1, –º–∞—Ä—Ç–∞: 2, –∞–ø—Ä–µ–ª—è: 3, –º–∞—è: 4, –∏—é–Ω—è: 5,
  –∏—é–ª—è: 6, –∞–≤–≥—É—Å—Ç–∞: 7, —Å–µ–Ω—Ç—è–±—Ä—è: 8, –æ–∫—Ç—è–±—Ä—è: 9, –Ω–æ—è–±—Ä—è: 10, –¥–µ–∫–∞–±—Ä—è: 11
};
const IRKUTSK_OFFSET = 8 * 60 * 60 * 1000;

function tryParseToISO(raw) {
  if (!raw) return null;
  const lower = raw.toLowerCase().trim();
  const now = new Date(); // —Ç–µ–∫—É—â–∏–π UTC
  const localNow = new Date(now.getTime() + IRKUTSK_OFFSET);

  const toISO = (date) => date.toISOString(); // –≤—Å–µ–≥–¥–∞ –≤ UTC

  const getTime = () => {
    const match = lower.match(/(\d{1,2}):(\d{2})/);
    return match ? { h: +match[1], m: +match[2] } : { h: 0, m: 0 };
  };

  if (/–≤ —Å–µ—Ç–∏|online|last seen/i.test(lower)) {
    return toISO(localNow);
  }
  const today = new Date(localNow);
  if (lower.startsWith('—Å–µ–≥–æ–¥–Ω—è')) {
    const { h, m } = getTime();
    today.setHours(h, m, 0, 0);
    return toISO(today);
  }
  if (lower.startsWith('–≤—á–µ—Ä–∞')) {
    const { h, m } = getTime();
    today.setDate(today.getDate() - 1);
    today.setHours(h, m, 0, 0);
    return toISO(today);
  }
  const monthMatch = lower.match(/(\d{1,2})\s+([–∞-—è—ë]+)\s+–≤\s+(\d{1,2}):(\d{2})/);
  if (monthMatch) {
    const day = +monthMatch[1];
    const month = months[monthMatch[2]];
    const hour = +monthMatch[3], minute = +monthMatch[4];
    if (month !== undefined) {
      const date = new Date(localNow.getFullYear(), month, day, hour, minute);
      return toISO(date);
    }
  }
  const numericMatch = lower.match(/(\d{1,2})\.(\d{1,2})\.(\d{4})\s+–≤\s+(\d{1,2}):(\d{2})/);
  if (numericMatch) {
    const day = +numericMatch[1], month = +numericMatch[2] - 1, year = +numericMatch[3];
    const hour = +numericMatch[4], minute = +numericMatch[5];
    const date = new Date(year, month, day, hour, minute);
    return toISO(date);
  }
  return null;
}

function cleanStatus(raw) {
  if (!raw) return null;

  if (/–≤ —Å–µ—Ç–∏|online|last seen/i.test(raw)) return raw.trim();

  // –£–±–∏—Ä–∞–µ–º –∏–º—è –∏ "–±—ã–ª(–∞)" + "–≤ —Å–µ—Ç–∏"
  const cleaned = raw.replace(/^[^\s]+ (–±—ã–ª[–∞–∏]?)(?: –≤ —Å–µ—Ç–∏)?\s*/i, '').trim();
  return cleaned || raw.trim();
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /lastseen ---
// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   let page = await browser.newPage();
//   await page.setUserAgent(globalUserAgent);
//   await applyAntiDetect(page);
//
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safePhone = sanitizeFileName(phone);
//   const htmlPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.html`);
//   const imgPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.png`);
//   const fragPath = path.join(localScreenshotDir, `fragment_${safePhone}_${timestamp}.html`);
//
//   console.log(`[${clientId}] üïí –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${phone} (${new Date().toISOString()})`);
//
//   const closeModals = async () => {
//     try {
//       const buttons = await page.$$('div[role="dialog"] button');
//       for (const btn of buttons) {
//         const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//         if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//           await btn.click();
//           console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
//           await page.waitForTimeout(1500);
//           break;
//         }
//       }
//     } catch (err) {
//       console.warn(`[${clientId}] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏: ${err.message}`);
//     }
//   };
//
//   async function saveDebug(reason = '') {
//     if (page.isClosed()) return;
//     try {
//       fs.mkdirSync(path.dirname(htmlPath), { recursive: true });
//       const html = await page.content();
//       const buffer = await page.screenshot();
//       fs.writeFileSync(htmlPath, html);
//       fs.writeFileSync(imgPath, buffer);
//       console.log(`[${clientId}] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã (${reason})`);
//     } catch (err) {
//       console.error(`[${clientId}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É: ${err.message}`);
//     }
//   }
//
//   try {
//     const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     await page.waitForTimeout(12000);
//     // await page.waitForTimeout(5000 + Math.random() * 5000);
//     await closeModals();
//
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–Ω–µ—Ä
//     const banner = await page.$('div[role="alert"]');
//     if (banner) {
//       console.warn(`[${clientId}] ‚ö† ${phone} ‚Äî –±–∞–Ω–Ω–µ—Ä "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"`);
//       await saveDebug('banner');
//       if (!page.isClosed()) await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null, rawLastSeen: null, stage: 'banner' });
//     }
//
//     // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
//     try {
//       await page.waitForSelector('header', { timeout: 20000 });
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω)`);
//       await page.waitForTimeout(8000);
//     } catch {
//       console.warn(`[${clientId}] ‚ùå header –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ–º–µ—Ä ${phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)`);
//       await saveDebug('no-header');
//       if (!page.isClosed()) await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null, rawLastSeen: null, stage: 'header' });
//     }
//
//     // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å
//     const { statusText, fragment } = await safeEvaluate(page, () => {
//       const allElements = Array.from(document.querySelectorAll('header *'));
//       const regex = /(–≤ —Å–µ—Ç–∏|online|–±—ã–ª|–±—ã–ª–∞|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2}|\d{1,2}\.\d{1,2}\.\d{4} –≤ \d{1,2}:\d{2})/i;
//       for (const el of allElements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text) || regex.test(aria) || regex.test(title)) {
//           return { statusText: text || aria || title, fragment: el.outerHTML || '' };
//         }
//       }
//       return { statusText: null, fragment: '' };
//     });
//
//     if (!statusText) {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
//       await saveDebug('no-status');
//       if (fragment) fs.writeFileSync(fragPath, fragment, 'utf8');
//       if (!page.isClosed()) await page.close();
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: null, rawLastSeen: null, stage: 'noStatus' });
//     }
//
//     if (statusText) {
//       const cleaned = cleanStatus(statusText);
//       console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText}`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: cleaned });
//     } else {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (HTML: ${htmlPath})`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: null });
//     }
//   } catch (e) {
//     console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${phone}: ${e.message}`);
//     try {
//       fs.writeFileSync(htmlPath, await page.content());
//       await page.screenshot({ path: imgPath });
//     } catch (_) {}
//     if (!page.isClosed()) await page.close();
//     return res.status(500).json({ status: 'error', error: e.message });
//   }
// });






//
//
// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   const page = await browser.newPage();
//
//
//   try {
//     await page.setUserAgent(globalUserAgent);
//     await applyAntiDetect(page);
//
//     const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//     const safePhone = sanitizeFileName(phone);
//     const htmlPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.html`);
//     const imgPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.png`);
//     const fragPath = path.join(localScreenshotDir, `fragment_${safePhone}_${timestamp}.html`);
//
//     console.log(`[${clientId}] üïí –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${phone} (${new Date().toISOString()})`);
//
//     const closeModals = async () => {
//       try {
//         const buttons = await page.$$('div[role="dialog"] button');
//         for (const btn of buttons) {
//           const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//           if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//             await btn.click();
//             console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
//             await page.waitForTimeout(5000);
//             break;
//           }
//         }
//       } catch (err) {
//         console.warn(`[${clientId}] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏: ${err.message}`);
//       }
//     };
//
//     const saveDebug = async (reason = '') => {
//       try {
//         fs.mkdirSync(path.dirname(htmlPath), { recursive: true });
//         const html = await page.content();
//         const buffer = await page.screenshot();
//         fs.writeFileSync(htmlPath, html);
//         fs.writeFileSync(imgPath, buffer);
//         console.log(`[${clientId}] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã (${reason})`);
//       } catch (err) {
//         console.error(`[${clientId}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É: ${err.message}`);
//       }
//     };
//
//     const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     await page.waitForTimeout(10000);
//     await closeModals();
//
//     const banner = await page.$('div[role="alert"]');
//     if (banner) {
//       console.warn(`[${clientId}] ‚ö† ${phone} ‚Äî –±–∞–Ω–Ω–µ—Ä "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"`);
//       await saveDebug('banner');
//       return res.json({
//         status: 'ok',
//         phone,
//         registered: false,
//         lastSeen: null,
//         rawLastSeen: null,
//         stage: 'banner'
//       });
//     }
//
//     try {
//       await page.waitForSelector('header', { timeout: 20000 });
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω`);
//       await page.waitForTimeout(10000);
//     } catch {
//       console.warn(`[${clientId}] ‚ùå header –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ–º–µ—Ä ${phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)`);
//       await saveDebug('no-header');
//       return res.json({
//         status: 'ok',
//         phone,
//         registered: false,
//         lastSeen: null,
//         rawLastSeen: null,
//         stage: 'header'
//       });
//     }
//
//     const { statusText, fragment } = await safeEvaluate(page, () => {
//       const allElements = Array.from(document.querySelectorAll('header *'));
//       const regex = /(–≤ —Å–µ—Ç–∏|online|–±—ã–ª|–±—ã–ª–∞|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2}|\d{1,2}\.\d{1,2}\.\d{4} –≤ \d{1,2}:\d{2})/i;
//       for (const el of allElements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text) || regex.test(aria) || regex.test(title)) {
//           return {
//             statusText: text || aria || title,
//             fragment: el.outerHTML || ''
//           };
//         }
//       }
//       return { statusText: null, fragment: '' };
//     });
//
//     if (!statusText) {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
//       if (fragment) fs.writeFileSync(fragPath, fragment, 'utf8');
//       await saveDebug('no-status');
//       return res.json({
//         status: 'ok',
//         phone,
//         registered: true,
//         lastSeen: null,
//         rawLastSeen: null,
//         stage: 'noStatus'
//       });
//     }
//
//     const cleaned = cleanStatus(statusText);
//     console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText}`);
//     return res.json({
//       status: 'ok',
//       phone,
//       registered: true,
//       lastSeen: cleaned,
//       rawLastSeen: statusText,
//       stage: 'ok'
//     });
//
//   } catch (e) {
//     console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${phone}: ${e.message}`);
//     try {
//       const htmlPath = path.join(localScreenshotDir, `error_${phone}_${Date.now()}.html`);
//       fs.writeFileSync(htmlPath, await page.content());
//       const imgPath = path.join(localScreenshotDir, `error_${phone}_${Date.now()}.png`);
//       await page.screenshot({ path: imgPath });
//     } catch (_) {}
//     return res.status(500).json({ status: 'error', error: e.message });
//
//   } finally {
//     if (!page.isClosed()) await page.close();
//   }
// });


const saveDebug = async (reason = '') => {
  try {
    fs.mkdirSync(path.dirname(htmlPath), { recursive: true });
    const html = await page.content();
    const buffer = await page.screenshot();
    fs.writeFileSync(htmlPath, html);
    fs.writeFileSync(imgPath, buffer);
    console.log(`[${clientId}] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã (${reason})`);
  } catch (err) {
    console.error(`[${clientId}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É: ${err.message}`);
  }
};

const closeModals = async () => {
  try {
    const buttons = await page.$$('div[role="dialog"] button');
    for (const btn of buttons) {
      const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
      if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
        await btn.click();
        console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
        await page.waitForTimeout(1500);
        break;
      }
    }
  } catch (err) {
    console.warn(`[${clientId}] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏: ${err.message}`);
  }
};


//
app.get('/lastseen/:phone', async (req, res) => {
  const phone = req.params.phone;
  if (!client || !client.pupPage) {
    return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
  }

  const browser = await client.pupPage.browser();
  const page = await browser.newPage();

  try {
    await page.setUserAgent(globalUserAgent);
    await applyAntiDetect(page);

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const safePhone = sanitizeFileName(phone);
    const htmlPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.html`);
    const imgPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.png`);
    const fragPath = path.join(localScreenshotDir, `fragment_${safePhone}_${timestamp}.html`);

    console.log(`[${clientId}] üïí –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${phone} (${new Date().toISOString()})`);


    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç
    const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
    await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
    await page.waitForTimeout(12000);
    await closeModals();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–Ω–µ—Ä "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    const banner = await page.$('div[role="alert"]');
    if (banner) {
      console.warn(`[${clientId}] ‚ö† ${phone} ‚Äî –±–∞–Ω–Ω–µ—Ä "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"`);
      // await saveDebug('banner');
      return res.json({ status: 'ok', phone, registered: false, lastSeen: null, rawLastSeen: null, stage: 'banner' });
    }

    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
    try {
      await page.waitForSelector('header', { timeout: 20000 });
      console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω)`);
      await page.waitForTimeout(11000);
    } catch {
      console.warn(`[${clientId}] ‚ùå header –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ–º–µ—Ä ${phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)`);
      await saveDebug('no-header');
      return res.json({ status: 'ok', phone, registered: false, lastSeen: null, rawLastSeen: null, stage: 'header' });
    }

    // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å last seen
    const { statusText, fragment } = await safeEvaluate(page, () => {
      const allElements = Array.from(document.querySelectorAll('header *'));
      const regex = /(–≤ —Å–µ—Ç–∏|online|–±—ã–ª|–±—ã–ª–∞|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2}|\d{1,2}\.\d{1,2}\.\d{4} –≤ \d{1,2}:\d{2})/i;
      for (const el of allElements) {
        const text = el.textContent?.trim() || '';
        const aria = el.getAttribute?.('aria-label')?.trim() || '';
        const title = el.getAttribute?.('title')?.trim() || '';
        if (regex.test(text) || regex.test(aria) || regex.test(title)) {
          return { statusText: text || aria || title, fragment: el.outerHTML || '' };
        }
      }
      return { statusText: null, fragment: '' };
    });

    if (!statusText) {
      console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      if (fragment) fs.writeFileSync(fragPath, fragment, 'utf8');
      // await saveDebug('no-header');
      return res.json({ status: 'ok', phone, registered: true, lastSeen: null, rawLastSeen: null, stage: 'noStatus' });
    }

    const cleaned = cleanStatus(statusText);
    console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText}`);
    return res.json({ status: 'ok', phone, registered: true, lastSeen: cleaned });

  } catch (e) {
    console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${phone}: ${e.message}`);
    try {
      const htmlPath = path.join(localScreenshotDir, `error_${phone}_${Date.now()}.html`);
      fs.writeFileSync(htmlPath, await page.content());
      const imgPath = path.join(localScreenshotDir, `error_${phone}_${Date.now()}.png`);
      await page.screenshot({ path: imgPath });
    } catch (_) {}
    return res.status(500).json({ status: 'error', error: e.message });

  } finally {
    if (!page.isClosed()) await page.close();
  }
});




//
// // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /lastseen ---
// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   let page = await browser.newPage();
//   await page.setUserAgent(globalUserAgent);
//   await applyAntiDetect(page);
//
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safePhone = sanitizeFileName(phone);
//   const htmlPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.html`);
//   const imgPath = path.join(localScreenshotDir, `debug_${safePhone}_${timestamp}.png`);
//   const fragPath = path.join(localScreenshotDir, `fragment_${safePhone}_${timestamp}.html`);
//
//   console.log(`[${clientId}] üïí –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${phone} (${new Date().toISOString()})`);
//
//   const closeModals = async () => {
//     try {
//       const buttons = await page.$$('div[role="dialog"] button');
//       for (const btn of buttons) {
//         const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//         if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//           await btn.click();
//           console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
//           await page.waitForTimeout(1500);
//           break;
//         }
//       }
//     } catch (err) {
//       console.warn(`[${clientId}] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏: ${err.message}`);
//     }
//   };
//
//   async function saveDebug(reason = '') {
//     if (page.isClosed()) return;
//     try {
//       fs.mkdirSync(path.dirname(htmlPath), { recursive: true });
//       const html = await page.content();
//       const buffer = await page.screenshot();
//       fs.writeFileSync(htmlPath, html);
//       fs.writeFileSync(imgPath, buffer);
//       // console.log(`[${clientId}] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã (${reason})`);
//     } catch (err) {
//       // console.error(`[${clientId}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É: ${err.message}`);
//     }
//   }
//
//   try {
//     const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     await page.waitForTimeout(12000);
//     // await page.waitForTimeout(5000 + Math.random() * 5000);
//     await closeModals();
//
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–Ω–µ—Ä
//     const banner = await page.$('div[role="alert"]');
//     if (banner) {
//       console.warn(`[${clientId}] ‚ö† ${phone} ‚Äî –±–∞–Ω–Ω–µ—Ä "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"`);
//       // await saveDebug('banner');
//       if (!page.isClosed()) await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null, rawLastSeen: null, stage: 'banner' });
//     }
//
//     // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
//     try {
//       await page.waitForSelector('header', { timeout: 20000 });
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω)`);
//       await page.waitForTimeout(8000);
//     } catch {
//       console.warn(`[${clientId}] ‚ùå header –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ–º–µ—Ä ${phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)`);
//       // await saveDebug('no-header');
//       if (!page.isClosed()) await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null, rawLastSeen: null, stage: 'header' });
//     }
//
//     // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å
//     const { statusText, fragment } = await safeEvaluate(page, () => {
//       const allElements = Array.from(document.querySelectorAll('header *'));
//       const regex = /(–≤ —Å–µ—Ç–∏|online|–±—ã–ª|–±—ã–ª–∞|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2}|\d{1,2}\.\d{1,2}\.\d{4} –≤ \d{1,2}:\d{2})/i;
//       for (const el of allElements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text) || regex.test(aria) || regex.test(title)) {
//           return { statusText: text || aria || title, fragment: el.outerHTML || '' };
//         }
//       }
//       return { statusText: null, fragment: '' };
//     });
//
//     if (!statusText) {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
//       // await saveDebug('no-status');
//       if (fragment) fs.writeFileSync(fragPath, fragment, 'utf8');
//       finally {
//         if (!page.isClosed()) await page.close();
//       }
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: null, rawLastSeen: null, stage: 'noStatus' });
//     }
//
//     if (statusText) {
//       const cleaned = cleanStatus(statusText);
//       console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText}`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: cleaned });
//     } else {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (HTML: ${htmlPath})`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: null });
//     }
//   } catch (e) {
//     console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${phone}: ${e.message}`);
//     try {
//       fs.writeFileSync(htmlPath, await page.content());
//       await page.screenshot({ path: imgPath });
//     } catch (_) {}
//     finally {
//       if (!page.isClosed()) await page.close();
//     }
//     return res.status(500).json({ status: 'error', error: e.message });
//   }
// });






// –ü–û–°–õ–ï–î–ù–Ø–Ø –†–ê–ë–û–ß–ê–Ø –ù–û –ë–ï–ó "–í –°–ï–¢–ò"
// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   const page = await browser.newPage();
//   await page.setUserAgent(globalUserAgent);
//
//   const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safePhone = sanitizeFileName(phone);
//   const htmlPath = `lastseen_debug_${safePhone}_${timestamp}.html`;
//   const imgPath = `lastseen_debug_${safePhone}_${timestamp}.png`;
//
//   const startTime = Date.now();
//   console.log(`[${clientId}] üïí –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${phone} (${new Date().toISOString()})`);
//
//   const closeModals = async () => {
//     let closed = false;
//     try {
//       const buttons = await page.$$('div[role="dialog"] button');
//       for (const btn of buttons) {
//         const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//         if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//           await btn.click();
//           closed = true;
//           break;
//         }
//       }
//     } catch (_) {}
//
//     if (closed) {
//       console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–≤—Ä–µ–º—è: ${Date.now() - startTime} –º—Å)`);
//       await page.waitForTimeout(1500);
//     } else {
//       console.log(`[${clientId}] ‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–≤—Ä–µ–º—è: ${Date.now() - startTime} –º—Å)`);
//     }
//   };
//
//   try {
//     console.log(`[${clientId}] üîç –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —á–∞—Ç ${phone} (${url})`);
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     await page.waitForTimeout(12000);
//     await closeModals();
//
//     const banner = await page.$('div[role="alert"]');
//     if (banner) {
//       console.warn(`[${clientId}] ‚ö†Ô∏è ${phone} ‚Äî –Ω–∞–π–¥–µ–Ω –±–∞–Ω–Ω–µ—Ä "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"`);
//       await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null, stage: 'banner' });
//     }
//
//
//     // –í–º–µ—Å—Ç–æ isRegisteredUser –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É header
//     try {
//       await page.waitForSelector('header', { timeout: 15000 });
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω`);
//       await page.waitForTimeout(10000);
//     } catch {
//       console.warn(`[${clientId}] ‚ùå header –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä ${phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
//       await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null, stage: 'header' });
//     }
//
//
//     // --- –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å–∞ ---
//     const statusText = await safeEvaluate(page, () => {
//       const regex = /(–≤ —Å–µ—Ç–∏|–±—ã–ª|online|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2})/i;
//       const elements = Array.from(document.querySelectorAll('header span, header div'));
//       for (const el of elements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text)) return text;
//         if (regex.test(aria)) return aria;
//         if (regex.test(title)) return title;
//       }
//       return null;
//     });
//
//     await page.setViewport({ width: 1920, height: 1080 });
//     await page.screenshot({ path: imgPath });
//     fs.writeFileSync(htmlPath, await page.content());
//     await page.close();
//
//     if (statusText) {
//       const cleaned = cleanStatus(statusText);
//       console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText}`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: cleaned, stage: 'lastSeen' });
//     } else {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (HTML: ${htmlPath})`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: null, stage: 'lastSeen' });
//     }
//   } catch (e) {
//     console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${phone}: ${e.message}`);
//     try {
//       fs.writeFileSync(htmlPath, await page.content());
//       await page.screenshot({ path: imgPath });
//     } catch (_) {}
//     await page.close();
//     return res.status(500).json({ status: 'error', error: e.message, stage: 'error' });
//   }
// });






// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   const page = await browser.newPage();
//   await page.setUserAgent(globalUserAgent);
//
//   const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safePhone = sanitizeFileName(phone);
//   const htmlPath = `lastseen_debug_${safePhone}_${timestamp}.html`;
//   const imgPath = `lastseen_debug_${safePhone}_${timestamp}.png`;
//
//   const startTime = Date.now();
//   console.log(`[${clientId}] üïí –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${phone} (${new Date().toISOString()})`);
//
//   const closeModals = async () => {
//     let closed = false;
//     try {
//       const buttons = await page.$$('div[role="dialog"] button');
//       for (const btn of buttons) {
//         const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//         if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//           await btn.click();
//           closed = true;
//           break;
//         }
//       }
//     } catch (_) {}
//
//     if (closed) {
//       console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–≤—Ä–µ–º—è: ${Date.now() - startTime} –º—Å)`);
//       await page.waitForTimeout(1500);
//     } else {
//       console.log(`[${clientId}] ‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–≤—Ä–µ–º—è: ${Date.now() - startTime} –º—Å)`);
//     }
//   };
//
//   try {
//     console.log(`[${clientId}] üîç –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —á–∞—Ç ${phone} (${url})`);
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     await page.waitForTimeout(12000);
//     await closeModals();
//
//     // üëâ –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API WhatsApp
//     const isRegistered = await client.isRegisteredUser(`${phone}@c.us`);
//     if (!isRegistered) {
//       console.warn(`[${clientId}] üìµ ${phone} ‚Äî –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API)`);
//       await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null });
//     }
//
//     // –î–∞–ª—å—à–µ –∏–¥—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ (header + lastSeen)
//     try {
//       await page.waitForSelector('header', { timeout: 15000 });
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω`);
//       await page.waitForTimeout(10000);
//     } catch {
//       console.warn(`[${clientId}] ‚ùå header –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–æ–º–µ—Ä –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp`);
//       await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null });
//     }
//
//     const statusText = await safeEvaluate(page, () => {
//       const regex = /(–≤ —Å–µ—Ç–∏|–±—ã–ª|online|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2})/i;
//       const elements = Array.from(document.querySelectorAll('header span, header div'));
//       for (const el of elements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text)) return text;
//         if (regex.test(aria)) return aria;
//         if (regex.test(title)) return title;
//       }
//       return null;
//     });
//
//     await page.setViewport({ width: 1920, height: 1080 });
//     await page.screenshot({ path: imgPath });
//     fs.writeFileSync(htmlPath, await page.content());
//     await page.close();
//
//     if (statusText) {
//       const cleaned = cleanStatus(statusText);
//       console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText}`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: cleaned });
//     } else {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (HTML: ${htmlPath})`);
//       return res.json({ status: 'ok', phone, registered: true, lastSeen: null });
//     }
//   } catch (e) {
//     console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${phone}: ${e.message}`);
//     try {
//       fs.writeFileSync(htmlPath, await page.content());
//       await page.screenshot({ path: imgPath });
//     } catch (_) {}
//     await page.close();
//     return res.status(500).json({ status: 'error', error: e.message });
//   }
// });



// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   const page = await browser.newPage();
//   await page.setUserAgent(globalUserAgent);
//
//   const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safePhone = sanitizeFileName(phone);
//   const htmlPath = `lastseen_debug_${safePhone}_${timestamp}.html`;
//   const imgPath = `lastseen_debug_${safePhone}_${timestamp}.png`;
//
//   const startTime = Date.now();
//   console.log(`[${clientId}] üïí –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${phone} (${new Date().toISOString()})`);
//
//   // üîß –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ WhatsApp Web
//   const closeModals = async () => {
//     let closed = false;
//     try {
//       const buttons = await page.$$('div[role="dialog"] button');
//       for (const btn of buttons) {
//         const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//         if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//           await btn.click();
//           closed = true;
//           break;
//         }
//       }
//     } catch (_) {
//       // –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
//     }
//
//     if (closed) {
//       console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–≤—Ä–µ–º—è: ${Date.now() - startTime} –º—Å)`);
//       await page.waitForTimeout(1500);
//     } else {
//       console.log(`[${clientId}] ‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–≤—Ä–µ–º—è: ${Date.now() - startTime} –º—Å)`);
//     }
//   };
//
//   try {
//     console.log(`[${clientId}] üîç –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —á–∞—Ç ${phone} (${url})`);
//     const gotoStart = Date.now();
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     console.log(`[${clientId}] ‚è± goto() –∑–∞–Ω—è–ª ${Date.now() - gotoStart} –º—Å (—Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime} –º—Å)`);
//
//     await page.waitForTimeout(12000);
//     console.log(`[${clientId}] ‚è± –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª–æ–∫ (—Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime} –º—Å)`);
//     await closeModals();
//
//     let chatLoaded = false;
//     try {
//       const headerStart = Date.now();
//       await page.waitForSelector('header', { timeout: 15000 });
//       chatLoaded = true;
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω (–∂–¥–∞–ª–∏ ${Date.now() - headerStart} –º—Å, —Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime} –º—Å)`);
//       await page.waitForTimeout(10000);
//     } catch {
//       console.warn(`[${clientId}] ‚ö† header –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–æ–º–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤ WhatsApp (—Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime} –º—Å)`);
//       await page.close();
//       return res.json({ status: 'ok', phone, registered: false, lastSeen: null });
//     }
//
//     const parseStart = Date.now();
//     const statusText = await safeEvaluate(page, () => {
//       const regex = /(–≤ —Å–µ—Ç–∏|–±—ã–ª|online|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2})/i;
//       const elements = Array.from(document.querySelectorAll('header span, header div'));
//       for (const el of elements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text)) return text;
//         if (regex.test(aria)) return aria;
//         if (regex.test(title)) return title;
//       }
//       return null;
//     });
//     console.log(`[${clientId}] ‚è± –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–Ω—è–ª ${Date.now() - parseStart} –º—Å (—Å –Ω–∞—á–∞–ª–∞: ${Date.now() - startTime} –º—Å)`);
//
//     await page.setViewport({ width: 1920, height: 1080 });
//     await page.screenshot({ path: imgPath });
//     fs.writeFileSync(htmlPath, await page.content());
//     await page.close();
//
//     const totalElapsed = Date.now() - startTime;
//     if (statusText) {
//       const cleaned = cleanStatus(statusText);
//       console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText} (–≤—Å–µ–≥–æ ${totalElapsed} –º—Å)`);
//       return res.json({ status: 'ok', phone, lastSeen: cleaned });
//     } else {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (HTML: ${htmlPath}, –≤—Å–µ–≥–æ ${totalElapsed} –º—Å)`);
//       return res.json({ status: 'ok', phone, lastSeen: null });
//     }
//   } catch (e) {
//     const totalElapsed = Date.now() - startTime;
//     console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${phone}: ${e.message} (–≤—Å–µ–≥–æ ${totalElapsed} –º—Å)`);
//
//     try {
//       fs.writeFileSync(htmlPath, await page.content());
//       await page.screenshot({ path: imgPath });
//     } catch (_) {}
//     await page.close();
//     return res.status(500).json({ status: 'error', error: e.message });
//   }
// });




// --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ lastSeen ---
app.get('/is-active-user', async (req, res) => {
  const phone = req.query.phone;
  if (!phone) return res.status(400).json({ status: 'error', message: 'phone required' });
  if (!client) return res.status(503).json({ status: 'error', message: 'client not ready' });

  try {
    const numberId = await client.getNumberId(phone);
    const registered = !!numberId;

    let lastSeenIso = null;
    if (registered && client.pupPage) {
      try {
        const rawStatus = await fetchLastSeenText(phone);
        if (rawStatus) {
          lastSeenIso = convertStatusToIso(rawStatus);
        }
      } catch (_) {}
    }

    return res.json({ status: 'ok', registered, lastSeen: lastSeenIso });
  } catch (e) {
    console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ /is-active-user: ${e.message}`);
    return res.status(500).json({ status: 'error', message: e.message });
  }
});

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ç–æ–ª—å–∫–æ lastSeen (—Ç–æ—Ç –∂–µ –¥–≤–∏–∂–æ–∫) ---
app.get('/last-seen', async (req, res) => {
  const phone = req.query.phone;
  if (!client || !client.pupPage) {
    return res.status(503).json({ status: 'error', message: 'client not ready' });
  }

  try {
    const rawStatus = await fetchLastSeenText(phone);
    const lastSeenIso = rawStatus ? convertStatusToIso(rawStatus) : null;
    return res.json({ status: 'ok', lastSeen: lastSeenIso });
  } catch (e) {
    console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ last-seen: ${e.message}`);
    return res.status(500).json({ status: 'error', message: e.message });
  }
});

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π) ---
app.get('/check-registered', async (req, res) => {
  const phone = req.query.phone;
  if (!phone) return res.status(400).json({ status: 'error', message: 'phone required' });
  if (!client) return res.status(503).json({ status: 'error', message: 'client not ready' });

  try {
    const numberId = await client.getNumberId(phone);
    return res.json({ status: 'ok', registered: !!numberId });
  } catch (e) {
    console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞ check-registered: ${e.message}`);
    return res.status(500).json({ status: 'error', message: e.message });
  }
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async function fetchLastSeenText(phone) {
  const browser = await client.pupPage.browser();
  const page = await browser.newPage();
  await page.setUserAgent(globalUserAgent);

  const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
  await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
  await page.waitForTimeout(10000);

  const statusText = await safeEvaluate(page, () => {
    const regex = /(–≤ —Å–µ—Ç–∏|–±—ã–ª|—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|\d{1,2} \D+ –≤ \d{1,2}:\d{2})/i;
    const elements = Array.from(document.querySelectorAll('header span, header div'));
    for (const el of elements) {
      const text = el.textContent?.trim() || '';
      if (regex.test(text)) return text;
    }
    return null;
  });
  await page.close();
  return statusText;
}

function convertStatusToIso(raw) {
  const now = new Date();
  const today = now.toISOString().split('T')[0];
  if (/–≤ —Å–µ—Ç–∏/i.test(raw)) return new Date().toISOString();
  if (/—Å–µ–≥–æ–¥–Ω—è/i.test(raw)) return `${today}T${raw.match(/\d{1,2}:\d{2}/)?.[0] || '00:00'}:00`;
  if (/–≤—á–µ—Ä–∞/i.test(raw)) {
    const yesterday = new Date(now.setDate(now.getDate() - 1)).toISOString().split('T')[0];
    return `${yesterday}T${raw.match(/\d{1,2}:\d{2}/)?.[0] || '00:00'}:00`;
  }
  // –§–æ–ª–ª–±–µ–∫ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å (Java –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å null –∏–ª–∏ —Å—Ç—Ä–æ–∫—É)
  return null;
}




app.listen(3000, () => {
  console.log(`üü¢ API –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000 –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
});








// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   const page = await browser.newPage();
//   await page.setUserAgent(globalUserAgent);
//
//   const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safePhone = sanitizeFileName(phone);
//   const htmlPath = `lastseen_debug_${safePhone}_${timestamp}.html`;
//   const imgPath = `lastseen_debug_${safePhone}_${timestamp}.png`;
//
//   // üîß –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ WhatsApp Web
//   const closeModals = async () => {
//     let closed = false;
//     try {
//       const buttons = await page.$$('div[role="dialog"] button');
//       for (const btn of buttons) {
//         const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//         if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//           await btn.click();
//           closed = true;
//           break;
//         }
//       }
//     } catch (_) {
//       // –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
//     }
//
//     if (closed) {
//       console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
//       await page.waitForTimeout(1500);
//     } else {
//       console.log(`[${clientId}] ‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`);
//     }
//   };
//
//   try {
//     console.log(`[${clientId}] üîç –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —á–∞—Ç —Å ${phone}`);
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     // await closeModals();
//     await page.waitForTimeout(12000);
//     await closeModals();
//
//     try {
//       await page.waitForSelector('header', { timeout: 15000 });
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω`);
//       await page.waitForTimeout(10000);
//     } catch {
//       console.warn(`[${clientId}] ‚ö† header –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
//     }
//
//     const statusText = await safeEvaluate(page, () => {
//       const regex = /(–≤ —Å–µ—Ç–∏|–±—ã–ª|online|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2})/i;
//       const elements = Array.from(document.querySelectorAll('header span, header div'));
//       for (const el of elements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text)) return text;
//         if (regex.test(aria)) return aria;
//         if (regex.test(title)) return title;
//       }
//       return null;
//     });





// const sanitizeFileName = str => str.replace(/[^\w.-]/g, '_');
//
// app.get('/lastseen/:phone', async (req, res) => {
//   const phone = req.params.phone;
//   if (!client || !client.pupPage) {
//     return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
//   }
//
//   const browser = await client.pupPage.browser();
//   const page = await browser.newPage();
//   await page.setUserAgent(globalUserAgent);
//
//   const url = `https://web.whatsapp.com/send?phone=${phone}&text&app_absent=0`;
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safePhone = sanitizeFileName(phone);
//   const htmlPath = `lastseen_debug_${safePhone}_${timestamp}.html`;
//   const imgPath = `lastseen_debug_${safePhone}_${timestamp}.png`;
//
//   // üîß –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ WhatsApp Web
//   const closeModals = async () => {
//     let closed = false;
//     try {
//       const buttons = await page.$$('div[role="dialog"] button');
//       for (const btn of buttons) {
//         const text = await page.evaluate(el => el.textContent?.toLowerCase() || '', btn);
//         if (['–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–ª–µ–µ', '—Ö–æ—Ä–æ—à–æ', '–≥–æ—Ç–æ–≤–æ'].some(t => text.includes(t))) {
//           await btn.click();
//           closed = true;
//           break;
//         }
//       }
//     } catch (_) {
//       // –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
//     }
//
//     if (closed) {
//       console.log(`[${clientId}] üßπ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ`);
//       await page.waitForTimeout(1500);
//     } else {
//       console.log(`[${clientId}] ‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`);
//     }
//   };
//
//   try {
//     console.log(`[${clientId}] üîç –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —á–∞—Ç —Å ${phone}`);
//     await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
//     await closeModals();
//     await page.waitForTimeout(10000);
//     await closeModals();
//
//     try {
//       await page.waitForSelector('header', { timeout: 15000 });
//       console.log(`[${clientId}] ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω`);
//       await page.waitForTimeout(10000);
//     } catch {
//       console.warn(`[${clientId}] ‚ö† header –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
//     }
//
//     const statusText = await page.evaluate(() => {
//       const regex = /(–≤ —Å–µ—Ç–∏|–±—ã–ª|online|last seen|—Å–µ–≥–æ–¥–Ω—è –≤|–≤—á–µ—Ä–∞ –≤|\d{1,2} \D+ –≤ \d{1,2}:\d{2})/i;
//       const elements = Array.from(document.querySelectorAll('header span, header div'));
//       for (const el of elements) {
//         const text = el.textContent?.trim() || '';
//         const aria = el.getAttribute?.('aria-label')?.trim() || '';
//         const title = el.getAttribute?.('title')?.trim() || '';
//         if (regex.test(text)) return text;
//         if (regex.test(aria)) return aria;
//         if (regex.test(title)) return title;
//       }
//       return null;
//     });
//
//     await page.setViewport({ width: 1920, height: 1080 });
//     await page.screenshot({ path: imgPath });
//     fs.writeFileSync(htmlPath, await page.content());
//     await page.close();
//
//     if (statusText) {
//       console.log(`[${clientId}] üìå –°—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω: ${statusText}`);
//       return res.json({ phone, status: statusText });
//     } else {
//       console.warn(`[${clientId}] ‚ö† –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, HTML: ${htmlPath}`);
//       return res.json({ phone, status: '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å' });
//     }
//   } catch (e) {
//     console.error(`[${clientId}] ‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
//     try {
//       fs.writeFileSync(htmlPath, await page.content());
//       await page.screenshot({ path: imgPath });
//     } catch (_) {}
//     await page.close();
//     return res.status(500).json({ status: 'error', error: e.message });
//   }
// });