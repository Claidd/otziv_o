const { Client, LocalAuth } = require('whatsapp-web.js');
const puppeteer = require('puppeteer');
const qrcodeTerminal = require('qrcode-terminal');
const qrcode = require('qrcode');
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const path = require('path');
const os = require('os');

const clientId = process.env.CLIENT_ID || 'default';
const serverUrl = process.env.SERVER_URL || 'http://localhost:8080';
const dataPath = process.env.AUTH_PATH || path.join(os.homedir(), '.wwebjs_auth');
const qrStore = {};
let client;

const makeClient = (id) => {
  const instance = new Client({
    authStrategy: new LocalAuth({
      clientId: id,
      dataPath: dataPath
    }),
    puppeteer: {
      headless: true,
      executablePath: puppeteer.executablePath(),
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
  });

  instance.on('qr', qr => {
    qrStore[id] = qr;
    console.log(`[${id}] QR-–∫–æ–¥ (—Ç–µ—Ä–º–∏–Ω–∞–ª):`);
    qrcodeTerminal.generate(qr, { small: true });
  });

  instance.on('authenticated', () => {
    console.log(`[${id}] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  });

  instance.on('ready', () => {
    console.log(`[${id}] üî• –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤`);
  });

  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

  instance.on('message', async msg => {
    const chat = await msg.getChat();

    if (msg.type !== 'chat') {
      console.log(`[${id}] üì∑ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (${msg.type}) –æ—Ç ${msg.from}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.`);
      return;
    }

    const content = msg.body?.trim();
    if (!content) return;

    const from = msg.from.replace('@c.us', '');

    if (chat.isGroup) {
      // –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –±–µ–∑ markAsRead
      const groupId = chat.id._serialized;
      const senderId = msg.author;
      const senderNumber = senderId?.replace('@c.us', '') || 'unknown';

      console.log(`üì® [${id}] –ì—Ä—É–ø–ø–∞: ${chat.name}`);
      console.log(`üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${senderNumber}`);
      console.log(`üí¨ –¢–µ–∫—Å—Ç: ${content}`);

      try {
        await axios.post(`${serverUrl}/webhook/whatsapp-group-reply`, {
          clientId: id,
          groupId,
          groupName: chat.name,
          from: senderNumber,
          message: content
        });
      } catch (err) {
        console.error(`[${id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã:`, err.message);
      }

    } else {
      // –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ markAsRead
      console.log(`[${id}] üì• –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${content}`);

      const delayBeforeRead = Math.floor(Math.random() * 25000) + 5000; // 5‚Äì30 —Å–µ–∫
      await delay(delayBeforeRead);

      try {
        await chat.sendSeen();
        console.log(`[${id}] ‚úÖ –ü–æ–º–µ—Ç–∏–ª–∏ —á–∞—Ç —Å ${from} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π`);
      } catch (err) {
        console.error(`[${id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π: ${err.message}`);
      }


      const delayAfterRead = Math.floor(Math.random() * 5000) + 2000; // 2‚Äì7 —Å–µ–∫
      await delay(delayAfterRead);

      try {
        await axios.post(`${serverUrl}/webhook/whatsapp-reply`, {
          clientId: id,
          from,
          message: content
        });
        console.log(`[${id}] üì§ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è`);
      } catch (err) {
        console.error(`[${id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: ${err.message}`);
      }
    }
  });



  instance.initialize();
  return instance;
};

client = makeClient(clientId);

const app = express();
app.use(bodyParser.json());

app.get('/qr', async (req, res) => {
  const qrData = qrStore[clientId];
  if (!qrData) return res.status(404).send('QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');

  const qrImage = await qrcode.toDataURL(qrData);
  res.send(`
    <html>
      <head><title>QR-–∫–æ–¥</title></head>
      <body>
        <h2>QR-–∫–æ–¥ –¥–ª—è ${clientId}</h2>
        <img src="${qrImage}" />
      </body>
    </html>
  `);
});

app.post('/send', async (req, res) => {
  const { phone, message } = req.body;
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–∏—á–∫—É ${phone}: ${message}`);
  if (!client || !client.info || !client.info.wid) {
    return res.status(503).json({ status: 'error', error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    console.log(`[${clientId}] ‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ POST –Ω–∞ ${serverUrl}/webhook/whatsapp-reply`);
    await client.sendMessage(`${phone}@c.us`, message);
    res.json({ status: 'ok' });
  } catch (e) {
    res.status(500).json({ status: 'error', error: e.message });
  }
});

app.post('/send-group', async (req, res) => {
  const { groupId, message } = req.body;
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É ${groupId}: ${message}`);

  try {
    console.log(`[${clientId}] ‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ POST –Ω–∞ ${serverUrl}/webhook/whatsapp-reply`);

    await client.sendMessage(groupId, message);
    res.json({ status: 'ok' });
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: ${e.message}`);
    res.status(500).json({ status: 'error', error: e.message });
  }
});

app.get('/health', async (req, res) => {
  try {
    const info = await client.getState(); // –Ω–∞–ø—Ä–∏–º–µ—Ä, "CONNECTED"
    return res.status(200).json({ status: info });
  } catch (e) {
    return res.status(500).json({ status: 'DISCONNECTED', error: e.message });
  }
});

app.listen(3000, () => {
  console.log(`üü¢ API –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000 –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
});




