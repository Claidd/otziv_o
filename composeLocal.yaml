version: '3.8'
networks:
  internal_net:

volumes:
  mysql_data:
  sent_hashes:

services:
  mysql:
    image: mysql:latest
    container_name: my-mysql
    volumes:
      - mysql_data:/var/lib/mysql
      - ./data/mysql_backup:/backup
      - ./data/bots:/var/lib/mysql-files/
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      internal_net:

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - '80:80'
      - '443:443'
    restart: always
    volumes:
      - ./data/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/nginx/www:/var/www
      - ./data/nginx/logs/nginx:/var/log/nginx
    depends_on:
      - mysql
      - phpmyadmin
      - app
    networks:
      internal_net:

  app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#      args:
#        BUILD_NO_CACHE: 1
    image: claid38/otziv-app-local
    restart: always
    depends_on:
      - mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN_LOCAL_DOCKER}
      TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME_LOCAL_DOCKER}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_USERNAME: ${MAIL_USERNAME}
      DATABASE_URL: ${DATABASE_URL}
      TZ: Asia/Irkutsk
      JAVA_OPTS: "-Xmx512m"
    env_file:
      - .env
    volumes:
      - ./data/app-logs:/app/logs
      - ./docker/sent-hashes:/app/sent-hashes
    networks:
      internal_net:

  phpmyadmin:
    image: phpmyadmin:latest
    ports:
      - "6571:80"
    volumes:
      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
      - ./data/phpmyadmin/apache2.conf:/etc/apache2/conf-available/servername.conf
    environment:
      - UPLOAD_LIMIT=512M
      - PMA_HOST=mysql
      - PMA_USER=${MYSQL_USER}
      - PMA_PASSWORD=${MYSQL_PASSWORD}
    restart: always
    depends_on:
      - mysql
    command: /bin/sh -c "chmod 644 /etc/phpmyadmin/config.inc.php && apache2-foreground"
    networks:
      internal_net:

#  vpn-proxy:
#    image: qmcgaw/gluetun:latest
#    cap_add:
#      - NET_ADMIN
#    environment:
#      - VPN_SERVICE_PROVIDER=custom
#      - VPN_TYPE=wireguard
#      - WIREGUARD_PRIVATE_KEY=+Gw0CzywSmBnqAqJ/AFxUvcdmJoLMTkYnXNVc2G4C3Q=
#      - WIREGUARD_ADDRESSES=10.64.128.252/32
#      - WIREGUARD_PUBLIC_KEY=veLqpZazR9j/Ol2G8TfrO32yEhc1i543MCN8rpy1FBA=
#      - WIREGUARD_ENDPOINT_IP=185.204.1.203
#      - WIREGUARD_ENDPOINT_PORT=51820
#      - WIREGUARD_ALLOWED_IPS=0.0.0.0/0,::0/0
#      - FIREWALL=off
#      - HTTPPROXY=on
#      - HTTPPROXY_LOG=on
#      - DNS=10.64.0.1
#    networks:
#      - internal_net


  log-viewer:
    image: amir20/dozzle
    container_name: log-viewer
    ports:
      - "8081:8080"
    volumes:
      - ./data/app-logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock  # ✅ главное изменение
    environment:
      - DOZZLE_LEVEL=info
    networks:
      - internal_net


#  whatsapp_vika:
#    build:
#      context: .
#      dockerfile: Dockerfile.whatsapp
##    image: otziv-whatsapp:latest
#    container_name: whatsapp_vika
#    volumes:
#      - ./whatsapp_auth_data/whatsapp_vika:/root/.config/whatsapp-web.js
#    ports:
#      - "1001:3000"
#    restart: always
#    environment:
#      - CLIENT_ID=whatsapp_vika
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net


#  whatsapp_lika:
#    image: otziv-whatsapp:latest
#    container_name: whatsapp_lika
#    volumes:
#      - ./whatsapp_auth_data/whatsapp_lika:/root/.config/whatsapp-web.js
#    ports:
#      - "1002:3000"
#    restart: always
#    depends_on:
#      - whatsapp_vika
#    environment:
#      - CLIENT_ID=whatsapp_lika
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net

  client1:
#    build:
#      context: .
#      dockerfile: Dockerfile.whatsapp
    image: claid38/otziv-whatsapp:latest
    container_name: client1
    volumes:
      - ./whatsapp_auth_data/client1:/root/.config/whatsapp-web.js
    ports:
      - "3001:3000"
    restart: always
    environment:
      - CLIENT_ID=client1
      - SERVER_URL=http://nginx:80
      - AUTH_PATH=/root/.config/whatsapp-web.js
    networks:
      - internal_net

  client2:
    image: claid38/otziv-whatsapp:latest
    container_name: client2
    volumes:
      - ./whatsapp_auth_data/client2:/root/.config/whatsapp-web.js
    ports:
      - "3002:3000"
    restart: always
    depends_on:
      - client1
    environment:
      - CLIENT_ID=client2
      - SERVER_URL=http://nginx:80
      - AUTH_PATH=/root/.config/whatsapp-web.js
    networks:
      - internal_net

#  client3:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client3
#    volumes:
#      - ./whatsapp_auth_data/client3:/root/.config/whatsapp-web.js
#    ports:
#      - "3003:3000"
#    restart: always
#    depends_on:
#      - client2
#    environment:
#      - CLIENT_ID=client3
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#
#  client4:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client4
#    volumes:
#      - ./whatsapp_auth_data/client4:/root/.config/whatsapp-web.js
#    ports:
#      - "3004:3000"
#    restart: always
#    depends_on:
#    - client3
#    environment:
#      - CLIENT_ID=client4
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client5:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client5
#    volumes:
#      - ./whatsapp_auth_data/client5:/root/.config/whatsapp-web.js
#    ports:
#      - "3005:3000"
#    restart: always
#    depends_on:
#      - client4
#    environment:
#      - CLIENT_ID=client5
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
##
#  client6:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client6
#    volumes:
#      - ./whatsapp_auth_data/client6:/root/.config/whatsapp-web.js
#    ports:
#      - "3006:3000"
#    restart: always
#    depends_on:
#      - client5
#    environment:
#      - CLIENT_ID=client6
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client7:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client7
#    volumes:
#      - ./whatsapp_auth_data/client7:/root/.config/whatsapp-web.js
#    ports:
#      - "3007:3000"
#    restart: always
#    depends_on:
#      - client6
#    environment:
#      - CLIENT_ID=client7
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client8:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client8
#    volumes:
#      - ./whatsapp_auth_data/client8:/root/.config/whatsapp-web.js
#    ports:
#      - "3008:3000"
#    restart: always
#    depends_on:
#      - client7
#    environment:
#      - CLIENT_ID=client8
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client9:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client9
#    volumes:
#      - ./whatsapp_auth_data/client9:/root/.config/whatsapp-web.js
#    ports:
#      - "3009:3000"
#    restart: always
#    depends_on:
#      - client8
#    environment:
#      - CLIENT_ID=client9
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client10:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client10
#    volumes:
#      - ./whatsapp_auth_data/client10:/root/.config/whatsapp-web.js
#    ports:
#      - "3010:3000"
#    restart: always
#    depends_on:
#      - client9
#    environment:
#      - CLIENT_ID=client10
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client11:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client11
#    volumes:
#      - ./whatsapp_auth_data/client11:/root/.config/whatsapp-web.js
#    ports:
#      - "3011:3000"
#    restart: always
#    depends_on:
#      - client10
#    environment:
#      - CLIENT_ID=client11
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client12:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client12
#    volumes:
#      - ./whatsapp_auth_data/client12:/root/.config/whatsapp-web.js
#    ports:
#      - "3012:3000"
#    restart: always
#    depends_on:
#      - client11
#    environment:
#      - CLIENT_ID=client12
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client13:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client13
#    volumes:
#      - ./whatsapp_auth_data/client13:/root/.config/whatsapp-web.js
#    ports:
#      - "3013:3000"
#    restart: always
#    depends_on:
#      - client12
#    environment:
#      - CLIENT_ID=client13
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#
#  client14:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client14
#    volumes:
#      - ./whatsapp_auth_data/client14:/root/.config/whatsapp-web.js
#    ports:
#      - "3014:3000"
#    restart: always
#    depends_on:
#      - client13
#    environment:
#      - CLIENT_ID=client14
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client15:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client15
#    volumes:
#      - ./whatsapp_auth_data/client15:/root/.config/whatsapp-web.js
#    ports:
#      - "3015:3000"
#    restart: always
#    depends_on:
#      - client14
#    environment:
#      - CLIENT_ID=client15
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client16:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client16
#    volumes:
#      - ./whatsapp_auth_data/client16:/root/.config/whatsapp-web.js
#    ports:
#      - "3016:3000"
#    restart: always
#    depends_on:
#      - client15
#    environment:
#      - CLIENT_ID=client16
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client17:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client17
#    volumes:
#      - ./whatsapp_auth_data/client17:/root/.config/whatsapp-web.js
#    ports:
#      - "3017:3000"
#    restart: always
#    depends_on:
#      - client16
#    environment:
#      - CLIENT_ID=client17
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client18:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client18
#    volumes:
#      - ./whatsapp_auth_data/client18:/root/.config/whatsapp-web.js
#    ports:
#      - "3018:3000"
#    restart: always
#    depends_on:
#      - client17
#    environment:
#      - CLIENT_ID=client18
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client19:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client19
#    volumes:
#      - ./whatsapp_auth_data/client19:/root/.config/whatsapp-web.js
#    ports:
#      - "3019:3000"
#    restart: always
#    depends_on:
#      - client18
#    environment:
#      - CLIENT_ID=client19
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client20:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client20
#    volumes:
#      - ./whatsapp_auth_data/client20:/root/.config/whatsapp-web.js
#    ports:
#      - "3020:3000"
#    restart: always
#    depends_on:
#      - client19
#    environment:
#      - CLIENT_ID=client20
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client21:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client21
#    volumes:
#      - ./whatsapp_auth_data/client21:/root/.config/whatsapp-web.js
#    ports:
#      - "3021:3000"
#    restart: always
#    depends_on:
#      - client20
#    environment:
#      - CLIENT_ID=client21
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client22:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client22
#    volumes:
#      - ./whatsapp_auth_data/client22:/root/.config/whatsapp-web.js
#    ports:
#      - "3022:3000"
#    restart: always
#    depends_on:
#      - client21
#    environment:
#      - CLIENT_ID=client22
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client23:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client23
#    volumes:
#      - ./whatsapp_auth_data/client23:/root/.config/whatsapp-web.js
#    ports:
#      - "3023:3000"
#    restart: always
#    depends_on:
#      - client22
#    environment:
#      - CLIENT_ID=client23
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#
#  client24:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client24
#    volumes:
#      - ./whatsapp_auth_data/client24:/root/.config/whatsapp-web.js
#    ports:
#      - "3024:3000"
#    restart: always
#    depends_on:
#      - client23
#    environment:
#      - CLIENT_ID=client24
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client25:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client25
#    volumes:
#      - ./whatsapp_auth_data/client25:/root/.config/whatsapp-web.js
#    ports:
#      - "3025:3000"
#    restart: always
#    depends_on:
#      - client24
#    environment:
#      - CLIENT_ID=client25
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client26:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client26
#    volumes:
#      - ./whatsapp_auth_data/client26:/root/.config/whatsapp-web.js
#    ports:
#      - "3026:3000"
#    restart: always
#    depends_on:
#      - client25
#    environment:
#      - CLIENT_ID=client26
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client27:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client27
#    volumes:
#      - ./whatsapp_auth_data/client27:/root/.config/whatsapp-web.js
#    ports:
#      - "3027:3000"
#    restart: always
#    depends_on:
#      - client26
#    environment:
#      - CLIENT_ID=client27
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client28:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client28
#    volumes:
#      - ./whatsapp_auth_data/client28:/root/.config/whatsapp-web.js
#    ports:
#      - "3028:3000"
#    restart: always
#    depends_on:
#      - client27
#    environment:
#      - CLIENT_ID=client28
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client29:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client29
#    volumes:
#      - ./whatsapp_auth_data/client29:/root/.config/whatsapp-web.js
#    ports:
#      - "3029:3000"
#    restart: always
#    depends_on:
#      - client28
#    environment:
#      - CLIENT_ID=client29
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net
#
#  client30:
#    image: claid38/otziv-whatsapp:latest
#    container_name: client30
#    volumes:
#      - ./whatsapp_auth_data/client30:/root/.config/whatsapp-web.js
#    ports:
#      - "3030:3000"
#    restart: always
#    depends_on:
#      - client29
#    environment:
#      - CLIENT_ID=client30
#      - SERVER_URL=http://nginx:80
#      - AUTH_PATH=/root/.config/whatsapp-web.js
#    networks:
#      - internal_net




  #  docker exec -i my-mysql mysqldump -uhunt -pRkfql54532111 otziv > /docker/backup-otziv.sql
#  docker exec -i d7a0df4ea753 mysqldump -uhunt -pRkfql54532111 otziv > /docker/backup-otziv.sql

  #  на сервере удаление старого файла и установка нового архива БД
  #  docker exec -i my-mysql mysql -uhunt -pRkfql54532111 otziv < /backup/backup-otziv.sql
  #  docker exec -i my-mysql mysql -uhunt -pRkfql54532111 otziv < /docker/backup-otziv.sql
  #  docker exec -i my-mysql mysql -uhunt -pRkfql54532111 otziv < /docker/data/mysql_backup/backup-otziv.sql




  #  mysql:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile.mysql
  #    container_name: mymysql
  #    volumes:
  #      - mysql_data:/var/lib/mysql
  #      - ./data/mysql/my.cnf:/etc/my.cnf:ro
  #      - ./data/mysql_backup:/backup
  #    restart: always
  #    ports:
  #      - '3306:3306'
  #    environment:
  #      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #      MYSQL_DATABASE: ${MYSQL_DATABASE}
  #      MYSQL_USER: ${MYSQL_USER}
  #      MYSQL_PASSWORD: ${MYSQL_PASSWORD}










        #  mysql:
        #    image: mysql:latest
        #    container_name: mymysql
        #    volumes:
        #      - mysql_data:/var/lib/mysql
        #      - ./data/mysql/my.cnf:/etc/my.cnf:ro
        #      - ./data/share:/share
        #      - ./data/mysql_backup:/backup  # новая директория для бэкапов
        #    restart: always
        #    ports:
        #      - '3306:3306'
        #    environment:
        #      MYSQL_ROOT_PASSWORD: Rkfql54532111
        #      MYSQL_DATABASE: otziv
        #      MYSQL_USER: hunt
        #      MYSQL_PASSWORD: Rkfql54532111
        #      command: >
        #        bash -c "
        #          (crontab -l 2>/dev/null;
        #          echo '0 3 * * * mysqldump -uhunt -pRkfql54532111 otziv > /backup/backup-otziv-\$(date +\%Y\%m\%d).sql') | crontab -"
        #      command: >
        #        bash -c "
        #          apk update &&
        #          apk add mariadb-client &&
        #          exec mysqld --innodb-flush-method=O_DIRECT"
        #        # Устанавливаем права доступа к файлу my.cnf
        # Устанавливаем права доступа к файлу my.cnf
        #    command: ["--innodb-flush-method=O_DIRECT"]
        #  mysqldump -uroot -pRkfql54532111 otziv > /share/backup-otziv.sql
      #  mysqldump -uhunt -pRkfql54532111 otziv > /backup/backup-otziv.sql


#      command: >
#        /bin/sh -c "
#        chmod 644 /etc/phpmyadmin/config.inc.php &&
#        apache2-foreground"


#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: Rkfql54532111
#      MYSQL_USER: hunt
#      MYSQL_PASSWORD: Rkfql54532111
#      file_mode: "0644"  # Установите права доступа по вашему выбору, например, 0644
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php





#    - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
#    - MYSQL_DATABASE=${MYSQL_DATABASE}
#    - MYSQL_USER=${MYSQL_USER}
#    - MYSQL_PASSWORD=${MYSQL_PASSWORD}
#    - BOT_TOKEN=${BOT_TOKEN}
#    - BOT_USERNAME=${BOT_USERNAME}
#    - MAIL_PASSWORD=${MAIL_PASSWORD}
#    - MAIL_USERNAME=${MAIL_USERNAME}
#version: '3.9'
#networks:
#  network2:
#
#services:
#  mysql:
#    image: mysql:latest
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      MYSQL_INNODB_LOG_FILE_SIZE: "100MB"
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#    restart: always
#    networks:
#      - network2
#
#  nginx:
#    image: nginx:latest
#    ports:
#      - '80:80'
#      - '443:443'
#    restart: always
#    volumes:
#      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/nginx/www:/var/www
#      - ./data/nginx/logs/nginx:/var/log/nginx
#      - ./data/proxy_cache:/var/lib/nginx/proxy_cache
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#    depends_on:
#      - app
#      - mysql
#    networks:
#      - network2
#
#  app:
#    image: claid38/otziv-app
#    restart: always
#    depends_on:
#      - mysql
#    environment:
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      BOT_TOKEN: ${BOT_TOKEN}
#      BOT_USERNAME: ${BOT_USERNAME}
#      MAIL_PASSWORD: ${MAIL_PASSWORD}
#      MAIL_USERNAME: ${MAIL_USERNAME}
#    networks:
#      - network2
#
#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '6571:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
#    networks:
#      - network2
#
#volumes:
#  mysql_data:



#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}


#    network_mode: "host"

#networks:
#  mynetwork:
#    driver: host





#




#networks:
#  mynetwork:
#    driver: bridge






#version: '3'
#
#services:
#  mysql:
#    image: mysql:latest
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      MYSQL_INNODB_LOG_FILE_SIZE: "100MB"
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#    restart: always
#    ports:
#      - '3306:3306'
#
#  nginx:
#    image: nginx:latest
#    ports:
#      - '80:80'
#      - '443:443'
#    restart:
#      always
#    volumes:
#      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/nginx/www:/var/www
#      - ./data/nginx/logs/nginx:/var/log/nginx
#      - ./data/proxy_cache:/var/lib/nginx/proxy_cache
#
#      # nginx должен общаться с php контейнером
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#    links:
#      - app
#
#  app:
#    image: claid38/otziv-app
#    ports:
#      - "8080:8080"
#    restart: always
#    depends_on:
#      - mysql
#    environment:
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#
#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
#
#volumes:
#  mysql_data:


























#version: '3'
#
#services:
#  mysql:
#    image: mysql:latest
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#    restart: always
#    ports:
#      - '3306:3306'
#
#
#  nginx:
#    image: nginx:latest
#    ports:
#      - '80:80'
#      - '443:443'
#    restart:
#      always
#    volumes:
#      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./data/nginx/o-ogo.crt:/etc/ssl
#      - ./data/nginx/ca.crt:/etc/ssl
#      - ./data/nginx/o-ogo.key:/etc/ssl
#      - ./data/nginx/www:/var/www
#      - ./data/nginx/logs/nginx:/var/log/nginx
##      - ./data/certbot/conf:/etc/letsencrypt
##      - ./data/certbot/www:/var/www/certbot
#      # nginx должен общаться с php контейнером
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#    depends_on:
#      - app
#      - phpmyadmin
#    links:
#      - app
#      - phpmyadmin
#
#
#  app:
#    build:
#      context: src
#      dockerfile: Dockerfile
#      args:
#        BUILD_NO_CACHE: 1
#    ports:
#      - "8080:8080"
#    environment:
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    restart: always
#    depends_on:
#      - mysql
#
#
#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: always
#    ports:
#      - '9000:80'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    volumes:
#      - ./data/nginx/ca.crt:/etc/ssl/ca.crt
#      - ./data/nginx/o-ogo.crt:/etc/ssl/o-ogo.crt
#      - ./data/nginx/o-ogo.key:/etc/ssl/o-ogo.key
#      - ./data/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
#
#volumes:
#  mysql_data:


#  certbot:
#    image: certbot/certbot
#    restart: unless-stopped
#    volumes:
#      - ./data/certbot/conf:/etc/letsencrypt
#      - ./data/certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


#  adminer:
#    image: adminer:latest
#    restart: always
#    ports:
#        - '8090:8080'
#    depends_on:
#      - mysql
#    environment:
#      PMA_HOST: mysql
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

#    network_mode: "host"

#networks:
#  mynetwork:
#    driver: host





#




#networks:
#  mynetwork:
#    driver: bridge









#services:
#  mysql:
#    image: mysql:latest
#    environment:
#      - MYSQL_DATABASE=otziv
#      - MYSQL_PASSWORD=545321
#      - MYSQL_ROOT_PASSWORD=root_password
#      - MYSQL_USER=hunt
#    restart: always
#    ports:
#      - '3306'
#  adminer:
#    image: adminer
#    restart: always
#    ports:
#        - '8080:8080'
#  api:
#    build: .
#    depends_on:
#      - mysql
#    environment:
#      SPRING_PROFILES_ACTIVE: application-server
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/otziv?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DB_USER: root
#      DB_PASSWORD: password


#      - SPRING_PROFILES_ACTIVE=production
#      - SERVER_PORT=8080
#      - JWT_SECRET=SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
#      - JWT_LIFETIME=5m
#      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=com.mysql.cj.jdbc.Driver
#      - SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/otziv
#      - SPRING_DATASOURCE_USERNAME=hunt
#      - SPRING_DATASOURCE_PASSWORD=545321
#      - SPRING_JPA_HIBERNATE_DDL-AUTO=validate
#      - SPRING_JPA_SHOW-SQL=true
#      - FLYWAY_BASELINE-ON-MIGRATE=true
#    ports:
#      - "8080:8080"