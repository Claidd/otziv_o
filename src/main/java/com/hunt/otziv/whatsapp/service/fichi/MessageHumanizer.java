package com.hunt.otziv.whatsapp.service.fichi;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.digest.DigestUtils;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.Pattern;

@Slf4j
public class MessageHumanizer {


    private final PersistentSentHashes sentHashes = new PersistentSentHashes();


    private final List<String> emojis = List.of("üòä", "üëç", "üéâ", "üî•", "üôå", "üòâ", "üí¨", "üì©", "üëã", "üí°");
    private final List<String> markers = List.of(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.",
            "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ.",
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.",
            "–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –º—ã –Ω–∞ —Å–≤—è–∑–∏.",
            "–†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã.",
            "–í—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å—É–µ–º.",
            "–û—Ç–∑—ã–≤—ã –ø–∏—à–µ–º –≤—Ä—É—á–Ω—É—é, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.",
            "–ü—É–±–ª–∏–∫—É—é—Ç —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã–µ –∞–≤—Ç–æ—Ä—ã.",
            "–û—Ü–µ–Ω–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –±—ã—Å—Ç—Ä–æ.",
            "–ü–∏—à–∏—Ç–µ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            "–ì–æ—Ç–æ–≤—ã –∫ –¥–æ–ª–≥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É.",
            "–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ, –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.",
            "–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
            "–ü–∏—à–∏—Ç–µ +, –∏ –º—ã –≤—Å—ë –≤—ã—à–ª–µ–º.",
            "–ü–æ–º–æ–∂–µ–º –ø–æ–¥–Ω—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å–ø–æ–∫–æ–π–Ω–æ –∏ —Ç–æ—á–Ω–æ.",
            "–ü–∏—à–∏—Ç–µ ‚Äî –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã.",
            "–†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
            "–ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—Ç—É—Ç –ø–æ—Å–ª–µ –Ω–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.",
            "–î–µ—Ç–∞–ª–∏ –º–æ–∂–µ–º –≤—ã—Å–ª–∞—Ç—å –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    );


    private final Map<String, List<String>> synonyms = Map.ofEntries(
            Map.entry("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", List.of("–ø—Ä–∏–≤–µ—Ç", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫", "—Ä–∞–¥–∞ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å", "—Å–≤—è–∑–∞–ª–∏—Å—å —Å –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –æ—Ç–∑—ã–≤–æ–≤")),
            Map.entry("–Ω–∞–ø–∏—à–∏—Ç–µ", List.of("+", "–¥–∞", "–æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏", "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç", "–¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ")),
            Map.entry("–æ—Ç–∑—ã–≤", List.of("–æ—Ç–º–µ—Ç–∫–∞", "—Ä–µ—Ü–µ–Ω–∑–∏—è", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ")),
            Map.entry("–æ—Ç–∑—ã–≤—ã", List.of("–æ—Ç–º–µ—Ç–∫–∏", "–æ—Ü–µ–Ω–∫–∏", "–º–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤", "–ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏")),
            Map.entry("–ø–∏—à–µ–º", List.of("—Ä–∞–∑–º–µ—â–∞–µ–º", "–ø—É–±–ª–∏–∫—É–µ–º", "–æ—Ñ–æ—Ä–º–ª—è–µ–º", "–≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º", "—Å–æ—Å—Ç–∞–≤–ª—è–µ–º")),
            Map.entry("–≥–æ—Ç–æ–≤", List.of("–Ω–∞–ø–∏—Å–∞–Ω", "–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω", "–æ—Ñ–æ—Ä–º–ª–µ–Ω", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω", "–∑–∞–≤–µ—Ä—à—ë–Ω")),
            Map.entry("–æ–ø–ª–∞—Ç–∞", List.of("–ø–µ—Ä–µ–≤–æ–¥", "–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", "—Ä–∞—Å—á—ë—Ç", "–¥–µ–Ω—å–≥–∏")),
            Map.entry("–ø–æ —Ñ–∞–∫—Ç—É", List.of("–ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", "–ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "–æ–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ", "–Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–æ–ø–ª–∞—Ç")),
            Map.entry("–ø–æ–¥—Ä–æ–±–Ω–µ–µ", List.of("–≤—Å—ë –æ–±—ä—è—Å–Ω—é", "—Ä–∞—Å—Å–∫–∞–∂—É –¥–µ—Ç–∞–ª–∏", "–Ω–∞–ø–∏—à—É —É—Å–ª–æ–≤–∏—è", "–ø–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä—ã", "–≤—ã—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")),
            Map.entry("–ø–æ–≤—ã—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥", List.of("–ø–æ–¥–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É", "—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—å", "–¥–æ–±–∞–≤–ª—è–µ–º –∑–≤—ë–∑–¥—ã", "—É–ª—É—á—à–∞–µ–º –∏–º–∏–¥–∂", "–ø—Ä–æ–¥–≤–∏–≥–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é")),
            Map.entry("—Ä–∞–±–æ—Ç–∞–µ–º", List.of("—Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º", "–∑–∞–Ω–∏–º–∞–µ–º—Å—è", "–ø–æ–º–æ–≥–∞–µ–º", "–ø—É–±–ª–∏–∫—É–µ–º")),
            Map.entry("–æ—Ç–∑–æ–≤–∏–∫–∞–º–∏", List.of("—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏", "—Ä–µ—Ü–µ–Ω–∑–∏—è–º–∏", "–º–Ω–µ–Ω–∏—è–º–∏", "–æ—Ç–º–µ—Ç–∫–∞–º–∏")),
            Map.entry("–∫–∞—Ä—Ç–æ—á–∫–∞", List.of("–ø—Ä–æ—Ñ–∏–ª—å", "–∫–æ–º–ø–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "—Å—Ç—Ä–∞–Ω–∏—Ü–∞")),
            Map.entry("–∂–∏–≤—ã–µ –∞–≤—Ç–æ—Ä—ã", List.of("–Ω–∞—Å—Ç–æ—è—â–∏–µ –ª—é–¥–∏", "–º–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–±–µ–∑ –Ω–∞–∫—Ä—É—Ç–∫–∏", "—Ä—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞"))
    );



    private final Map<Character, Character> typoMap = Map.of(
            '–∞', 'a', '–µ', 'e', '–æ', '0', '–±', '6', '–∏', 'u', '—Å', 'c', '–∫', 'k'
    );

    public String generate(String template) {
        for (int attempt = 0; attempt < 5; attempt++) {
            String msg = applyHumanization(template);
            String hash = DigestUtils.sha1Hex(msg);
            if (sentHashes.isNew(hash)) {
                return msg;
            }
        }
        log.warn("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫");
        return template;
    }

    private String applyHumanization(String template) {
        String result = applySynonyms(template);

        List<String> sentences = new ArrayList<>(List.of(result.split("(?<=[.!?])\\s*")));
        if (sentences.size() > 1 && ThreadLocalRandom.current().nextBoolean()) {
            Collections.shuffle(sentences);
        }

        int emojiIdx = ThreadLocalRandom.current().nextInt(sentences.size());
        String emoji = emojis.get(ThreadLocalRandom.current().nextInt(emojis.size()));
        sentences.set(emojiIdx, insertEmojiSmart(sentences.get(emojiIdx), emoji));

        if (ThreadLocalRandom.current().nextInt(100) < 40) {
            sentences.add(markers.get(ThreadLocalRandom.current().nextInt(markers.size())));
        }

        String finalMessage = String.join(" ", sentences);
        return injectFakeTypos(finalMessage);
    }

    private String applySynonyms(String msg) {
        String result = msg;
        for (Map.Entry<String, List<String>> entry : synonyms.entrySet()) {
            if (result.toLowerCase().contains(entry.getKey())) {
                String replacement = entry.getValue().get(ThreadLocalRandom.current().nextInt(entry.getValue().size()));
                result = result.replaceAll("(?i)" + Pattern.quote(entry.getKey()), replacement);
            }
        }
        return result;
    }

    private String insertEmojiSmart(String sentence, String emoji) {
        int insertPos = Math.max(Math.max(sentence.lastIndexOf("."), sentence.lastIndexOf("!")), sentence.lastIndexOf("?"));
        if (insertPos == -1) {
            return sentence + " " + emoji;
        }
        boolean after = ThreadLocalRandom.current().nextBoolean();
        if (after) {
            return sentence.substring(0, insertPos + 1) + " " + emoji + sentence.substring(insertPos + 1);
        } else {
            return sentence.substring(0, insertPos) + " " + emoji + sentence.substring(insertPos);
        }
    }

    private String injectFakeTypos(String msg) {
        StringBuilder result = new StringBuilder();
        for (char c : msg.toCharArray()) {
            if (typoMap.containsKey(c) && ThreadLocalRandom.current().nextInt(100) < 10) {
                result.append(typoMap.get(c));
            } else {
                result.append(c);
            }
        }
        return result.toString();
    }
}