package com.hunt.otziv.whatsapp.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hunt.otziv.whatsapp.config.WhatsAppProperties;
import com.hunt.otziv.whatsapp.service.service.WhatsAppService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Map;
import java.util.Optional;

@Service
@Slf4j
@RequiredArgsConstructor
public class WhatsAppServiceImpl implements WhatsAppService {
    private final WhatsAppProperties properties;
    private final RestTemplate restTemplate;

    public String sendMessage(String clientId, String phone, String message) {
        log.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {} –Ω–∞ {}", clientId, phone);

        Optional<WhatsAppProperties.ClientConfig> clientOpt = properties.getClients()
                .stream()
                .filter(c -> c.getId().equals(clientId))
                .findFirst();

        if (clientOpt.isEmpty()) {
            log.warn("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {}", clientId);
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: " + clientId;
        }

        String url = clientOpt.get().getUrl();

        try {
            ObjectMapper mapper = new ObjectMapper();
            String jsonBody = mapper.writeValueAsString(Map.of(
                    "client", clientId,
                    "phone", phone,
                    "message", message
            ));

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> request = new HttpEntity<>(jsonBody, headers);

            log.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {}, payload: {}", url, jsonBody);

            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);

//            WhatsAppMessage saved = messageRepository.save(
//                    new WhatsAppMessage(null, clientId, phone, message, response.getBody(), LocalDateTime.now())
//            );
//
//            log.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {}", saved.getId());
//            return "‚è© –û—Ç–≤–µ—Ç: " + response.getBody();

            log.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç {}: {}", clientId, response.getBody());
            return "‚è© –û—Ç–≤–µ—Ç: " + response.getBody();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ {}: {}", clientId, e.getMessage(), e);
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }
}
