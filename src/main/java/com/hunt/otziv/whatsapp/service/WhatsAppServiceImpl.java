package com.hunt.otziv.whatsapp.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hunt.otziv.whatsapp.config.WhatsAppProperties;
import com.hunt.otziv.whatsapp.dto.WhatsAppUserStatusDto;
import com.hunt.otziv.whatsapp.service.fichi.LastSeenParser;
import com.hunt.otziv.whatsapp.service.service.WhatsAppService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.Optional;

@Service
@Slf4j
@RequiredArgsConstructor
public class WhatsAppServiceImpl implements WhatsAppService {
    private final WhatsAppProperties properties;
    private final RestTemplate restTemplate;

    public String sendMessageToGroup(String clientId, String groupId, String message) {
        log.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ {} –Ω–∞ {}", clientId, groupId);

        if (groupId == null) {
            log.error("‚ùå groupId —Ä–∞–≤–µ–Ω null. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
            return "‚ùå –û—à–∏–±–∫–∞: groupId –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null";
        }

        Optional<WhatsAppProperties.ClientConfig> clientOpt = properties.getClients()
                .stream()
                .filter(c -> c.getId().equals(clientId))
                .findFirst();

        if (clientOpt.isEmpty()) {
            log.warn("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {}", clientId);
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: " + clientId;
        }

        String url = clientOpt.get().getUrl();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }
        log.info("‚û°Ô∏è URL: {}", url + "/send-group");

        try {
            ObjectMapper mapper = new ObjectMapper();
            String jsonBody = mapper.writeValueAsString(Map.of(
                    "groupId", groupId,
                    "message", message
            ));

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> request = new HttpEntity<>(jsonBody, headers);

            log.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {}, payload: {}", url, jsonBody);

            ResponseEntity<String> response = restTemplate.postForEntity(
                    url + "/send-group", request, String.class
            );

            log.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç {}: {}", clientId, response.getBody());
            return "‚è© –û—Ç–≤–µ—Ç: " + response.getBody();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ {}: {}", clientId, e.getMessage(), e);
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }


    public String sendMessage(String clientId, String phone, String message) {
        log.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {} –Ω–∞ {}", clientId, phone);

        Optional<WhatsAppProperties.ClientConfig> clientOpt = properties.getClients()
                .stream()
                .filter(c -> c.getId().equals(clientId))
                .findFirst();

        if (clientOpt.isEmpty()) {
            log.warn("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {}", clientId);
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: " + clientId;
        }

        String url = clientOpt.get().getUrl();
        log.info("‚û°Ô∏è URL: {}", url + "/send");

        try {
            ObjectMapper mapper = new ObjectMapper();
            String jsonBody = mapper.writeValueAsString(Map.of(
                    "client", clientId,
                    "phone", phone,
                    "message", message
            ));

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> request = new HttpEntity<>(jsonBody, headers);

            log.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {}, payload: {}", url, jsonBody);

//            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);
            ResponseEntity<String> response = restTemplate.postForEntity(
                    url + "/send", request, String.class
            );


            log.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç {}: {}", clientId, response.getBody());
            return "‚è© –û—Ç–≤–µ—Ç: " + response.getBody();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ {}: {}", clientId, e.getMessage(), e);
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }

    public Optional<WhatsAppUserStatusDto> checkActiveUser(String clientId, String phone) {
        String url = String.format("http://%s:3000/is-active-user?phone=%s", clientId, phone);

        try {
            ResponseEntity<WhatsAppUserStatusDto> response =
                    restTemplate.getForEntity(url, WhatsAppUserStatusDto.class);

            WhatsAppUserStatusDto body = response.getBody();

            if (body != null && "ok".equals(body.getStatus())) {
                if (body.getRegistered() != null) {
                    return Optional.of(body);
                } else {
                    log.warn("üì• [ACTIVE USER] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø–æ–ª–µ 'registered' = null –¥–ª—è {}: {}", phone, body);
                }
            } else {
                log.warn("üì• [ACTIVE USER] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {}: {}", phone, body);
            }
        } catch (Exception e) {
            log.warn("‚ùå [ACTIVE USER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {}: {}", phone, e.getMessage());
        }

        return Optional.empty();
    }



    /**
     * –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ—Ç lastSeen.
     */
    /**
     * –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ—Ç lastSeen.
     * Node.js API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {status:"ok", registered:true/false, lastSeen:"2025-07-21T07:06:00Z" –∏–ª–∏ "—Å–µ–≥–æ–¥–Ω—è –≤ 07:06"}.
     *
     */
    private static final DateTimeFormatter IRKUTSK_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")
            .withZone(ZoneId.of("Asia/Irkutsk"));

    @Override
    public Optional<WhatsAppUserStatusDto> getUserStatusWithLastSeen(String clientId, String phone) {
        String url = String.format("http://%s:3000/lastseen/%s", clientId, phone);
        long start = System.currentTimeMillis();

        try {
            log.info("‚ñ∂ [{}] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ WhatsApp ({}), URL: {}", clientId, phone, url);

            ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
            Map<String, Object> body = response.getBody();

            if (body == null || !"ok".equals(body.get("status"))) {
                log.warn("üì• [{}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {}: {}", clientId, phone, body);
                return Optional.empty();
            }

            boolean registered = Boolean.TRUE.equals(body.get("registered"));
            String rawLastSeen = (String) body.get("lastSeen");
            String stage = (String) body.getOrDefault("stage", "unknown");

            LocalDateTime parsedLastSeen = null;
            if (rawLastSeen != null && !rawLastSeen.isBlank()) {
                parsedLastSeen = LastSeenParser.parse(rawLastSeen).orElse(null);
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞
            String formattedLastSeen = parsedLastSeen != null ? parsedLastSeen.format(IRKUTSK_FORMAT) : null;

            // –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–∞–ø –∏ –ø—Ä–∏—á–∏–Ω—É
            log.info("‚úÖ [{}] –°—Ç–∞—Ç—É—Å –¥–ª—è {} (stage={}): registered={}, lastSeen={}, rawLastSeen='{}' (elapsed: {} –º—Å)",
                    clientId, phone, stage, registered, formattedLastSeen, rawLastSeen, System.currentTimeMillis() - start);

            if (!registered) {
                log.info("‚Ñπ [{}] –ü—Ä–∏—á–∏–Ω–∞: –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (stage={}).", clientId, stage);
            } else if (parsedLastSeen == null) {
                log.info("‚Ñπ [{}] –ü—Ä–∏—á–∏–Ω–∞: lastSeen –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (stage={}), —Å—á–∏—Ç–∞–µ–º '–æ—Ñ—Ñ–ª–∞–π–Ω'.", clientId, stage);
            } else {
                log.info("‚Ñπ [{}] –ü—Ä–∏—á–∏–Ω–∞: lastSeen –Ω–∞–π–¥–µ–Ω (stage={}).", clientId, stage);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DTO
            WhatsAppUserStatusDto dto = new WhatsAppUserStatusDto();
            dto.setStatus("ok");
            dto.setRegistered(registered);
            dto.setRawLastSeen(rawLastSeen);
            dto.setParsedLastSeen(parsedLastSeen);
            dto.setLastSeen(formattedLastSeen);

            // –ï—Å–ª–∏ lastSeen –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω ‚Äî —Å—Ä–∞–∑—É –≤—ã—Å—Ç–∞–≤–ª—è–µ–º "–æ—Ñ—Ñ–ª–∞–π–Ω"
            if (registered && parsedLastSeen == null) {
                dto.setStatus("offline");
            }

            return Optional.of(dto);

        } catch (ResourceAccessException e) {
            log.error("‚è± [{}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {}: {}", clientId, phone, e.getMessage());
            return Optional.empty();
        } catch (Exception e) {
            log.warn("‚ùå [{}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {}: {}", clientId, phone, e.getMessage());
            return Optional.empty();
        }
    }







//    @Override
//    public Optional<WhatsAppUserStatusDto> getUserStatusWithLastSeen(String clientId, String phone) {
//        String url = String.format("http://%s:3000/lastseen/%s", clientId, phone);
//        long start = System.currentTimeMillis();
//
//        try {
//            log.info("‚ñ∂ [{}] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ WhatsApp ({}), URL: {}", clientId, phone, url);
//
//            ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
//            Map<String, Object> body = response.getBody();
//
//            if (body == null || !"ok".equals(body.get("status"))) {
//                log.warn("üì• [{}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {}: {}", clientId, phone, body);
//                return Optional.empty();
//            }
//
//            boolean registered = Boolean.TRUE.equals(body.get("registered"));
//            String rawLastSeen = (String) body.get("lastSeen");
//            LocalDateTime parsedLastSeen = null;
//
//            // –ï—Å–ª–∏ –µ—Å—Ç—å lastSeen ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
//            if (rawLastSeen != null && !rawLastSeen.isBlank()) {
//                try {
//                    parsedLastSeen = LocalDateTime.parse(rawLastSeen); // ISO-—Ñ–æ—Ä–º–∞—Ç
//                } catch (Exception e) {
//                    parsedLastSeen = LastSeenParser.parse(rawLastSeen).orElse(null);
//                }
//            }
//
//            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–∏—á–∏–Ω—É
//            log.info("‚úÖ [{}] –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω –¥–ª—è {}: registered={}, parsedLastSeen={}, rawLastSeen='{}' (elapsed: {} –º—Å)",
//                    clientId, phone, registered, parsedLastSeen, rawLastSeen, System.currentTimeMillis() - start);
//
//            if (!registered) {
//                log.info("‚Ñπ [{}] –ü—Ä–∏—á–∏–Ω–∞: –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ header).", clientId);
//            } else if (rawLastSeen == null) {
//                log.info("‚Ñπ [{}] –ü—Ä–∏—á–∏–Ω–∞: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ lastSeen –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å).", clientId);
//            } else {
//                log.info("‚Ñπ [{}] –ü—Ä–∏—á–∏–Ω–∞: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω ('{}').", clientId, rawLastSeen);
//            }
//
//            // –§–æ—Ä–º–∏—Ä—É–µ–º DTO
//            WhatsAppUserStatusDto dto = new WhatsAppUserStatusDto();
//            dto.setStatus("ok");
//            dto.setRegistered(registered);
//            dto.setRawLastSeen(rawLastSeen);
//            dto.setParsedLastSeen(parsedLastSeen);
//            dto.setLastSeen(parsedLastSeen != null ? parsedLastSeen.toString() : null);
//
//            return Optional.of(dto);
//
//        } catch (ResourceAccessException e) {
//            log.error("‚è± [{}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {}: {}", clientId, phone, e.getMessage());
//            return Optional.empty();
//        } catch (Exception e) {
//            log.warn("‚ùå [{}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {}: {}", clientId, phone, e.getMessage());
//            return Optional.empty();
//        }
//    }





    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ lastSeen –Ω–∞–ø—Ä—è–º—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).
     * Node.js API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {status:"ok", lastSeen:"—Å–µ–≥–æ–¥–Ω—è –≤ 14:10"}.
     */
    public Optional<LocalDateTime> fetchLastSeen(String clientId, String phone) {
        String url = String.format("http://%s:3000/lastseen/%s", clientId, phone);
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);
            Map<String, Object> body = response.getBody();

            if (body == null) {
                log.warn("üì¥ [LAST SEEN] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç {} –¥–ª—è {}", clientId, phone);
                return Optional.empty();
            }

            String raw = (String) body.get("lastSeen"); // –∞ –Ω–µ "status"
            if (raw == null || raw.isBlank()) {
                log.info("üì¥ [{}] lastSeen —Å–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {}", clientId, phone);
                return Optional.empty();
            }

            return LastSeenParser.parse(raw);

        } catch (Exception e) {
            log.warn("üì¥ [LAST SEEN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ lastSeen —É –∫–ª–∏–µ–Ω—Ç–∞ {} –¥–ª—è {}: {}", clientId, phone, e.getMessage());
            return Optional.empty();
        }
    }

    @Override
    public Optional<Boolean> isRegisteredInWhatsApp(String clientId, String phone) {
        String url = String.format("http://%s:3000/check-registered?phone=%s", clientId, phone);
        try {
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            if (response.getStatusCode().is2xxSuccessful()) {
                JsonNode node = new ObjectMapper().readTree(response.getBody());
                if ("ok".equals(node.get("status").asText())) {
                    return Optional.of(node.get("registered").asBoolean());
                }
            }
        } catch (Exception e) {
            log.warn("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ WhatsApp: {}", e.getMessage());
        }
        return Optional.empty(); // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø—É—Å—Ç—å —Ä–µ—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    }


}
