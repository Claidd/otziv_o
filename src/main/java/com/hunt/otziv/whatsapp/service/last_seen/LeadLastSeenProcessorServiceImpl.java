package com.hunt.otziv.whatsapp.service.last_seen;

import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.repository.LeadsRepository;
import com.hunt.otziv.l_lead.services.serv.VpsSyncService;
import com.hunt.otziv.u_users.model.Manager;
import com.hunt.otziv.whatsapp.dto.WhatsAppUserStatusDto;
import com.hunt.otziv.whatsapp.service.service.WhatsAppService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;


@Service
@Slf4j
@RequiredArgsConstructor
public class LeadLastSeenProcessorServiceImpl {

    private final LeadsRepository leadRepository;
    private final WhatsAppService whatsAppService;
    private final ObjectProvider<LeadLastSeenCollectorServiceImpl> collectorProvider;
    private static final ZoneId IRKUTSK_ZONE = ZoneId.of("Asia/Irkutsk");

    private final VpsSyncService vpsSyncService;         // –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
    private static final List<Long> MANAGER_IDS = List.of(2L, 3L);
    private final AtomicInteger managerCounter = new AtomicInteger(0);

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ª–∏–¥–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ lastSeen, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î.
     * –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.
     */
    public void processLead(String clientId, Lead lead) {
        String phone = normalizePhone(lead.getTelephoneLead());
        long startTime = System.currentTimeMillis();

        log.info("‚ñ∂ [PROCESS LEAD] –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞ {} (–Ω–æ–º–µ—Ä: {}) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {} –≤ {}",
                lead.getId(), phone, clientId, LocalDateTime.now(IRKUTSK_ZONE));

        try {
            log.info("‚è± [{}] –®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å WhatsApp —É Node.js (—Ç–µ–ª–µ—Ñ–æ–Ω: {})", clientId, phone);
            long statusStart = System.currentTimeMillis();

            Optional<WhatsAppUserStatusDto> statusOpt =
                    whatsAppService.getUserStatusWithLastSeen(clientId, phone);

            long statusElapsed = System.currentTimeMillis() - statusStart;
            log.info("‚è± [{}] –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {} –º—Å", clientId, statusElapsed);

            if (statusOpt.isEmpty()) {
                log.warn("‚ö† [{}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å WhatsApp –¥–ª—è {} (elapsed: {} –º—Å)",
                        clientId, phone, System.currentTimeMillis() - startTime);
                collectorProvider.getObject().incrementStat(clientId, 1, 0, 0, 1);
                return;
            }

            WhatsAppUserStatusDto status = statusOpt.get();
            String stage = status.getStage() != null ? status.getStage() : "unknown";

            log.info("‚Ñπ [{}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (stage={}): registered={}, lastSeenRaw={}, parsedLastSeen={}",
                    clientId, stage, status.getRegistered(), status.getRawLastSeen(), status.getParsedLastSeen());

            long dbStart = System.currentTimeMillis();

            // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å—Ä–∞–∑—É –æ—Ñ—Ñ–ª–∞–π–Ω
            if (Boolean.FALSE.equals(status.getRegistered())) {
                lead.setLastSeen(null);
                lead.setLidStatus("–û—Ñ—Ñ–ª–∞–π–Ω");
                leadRepository.save(lead);
                collectorProvider.getObject().incrementStat(clientId, 1, 0, 0, 1);
                log.info("üìµ [{}] {} ‚Äî –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (stage={}), —Å—Ç–∞—Ç—É—Å '–û—Ñ—Ñ–ª–∞–π–Ω' (DB save {} –º—Å)",
                        clientId, phone, stage, System.currentTimeMillis() - dbStart);
                return;
            }

            // –ï—Å–ª–∏ lastSeen –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if (status.getParsedLastSeen() != null) {
                lead.setLastSeen(status.getParsedLastSeen());
                lead.setLidStatus("–ù–æ–≤—ã–π");

                // –ß–µ—Ä–µ–¥—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (2 ‚Üí 3 ‚Üí 2 ‚Üí 3 ‚Ä¶)
                Long nextManagerId = MANAGER_IDS.get(managerCounter.getAndIncrement() % MANAGER_IDS.size());
                Manager manager = new Manager();
                manager.setId(nextManagerId);
                lead.setManager(manager);

                leadRepository.save(lead);

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ VPS
                vpsSyncService.sendLeadAsync(lead);

                collectorProvider.getObject().incrementStat(clientId, 1, 1, 1, 0);
                log.info("üìÖ [{}] {} ‚Äî lastSeen={}, –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω ID={} (DB save {} –º—Å)",
                        clientId, phone, status.getParsedLastSeen(), nextManagerId, System.currentTimeMillis() - dbStart);
            } else {
                // lastSeen –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω
                lead.setLastSeen(null);
                lead.setLidStatus("–û—Ñ—Ñ–ª–∞–π–Ω");
                leadRepository.save(lead);
                collectorProvider.getObject().incrementStat(clientId, 1, 1, 0, 1);
                log.info("üì¥ [{}] {} ‚Äî lastSeen –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (stage={}), —Å—Ç–∞—Ç—É—Å '–û—Ñ—Ñ–ª–∞–π–Ω' (DB save {} –º—Å)",
                        clientId, phone, stage, System.currentTimeMillis() - dbStart);
            }

            log.info("‚úÖ [{}] –õ–∏–¥ {} ({}): –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {} –º—Å (—Å –Ω–∞—á–∞–ª–∞)",
                    clientId, lead.getId(), phone, System.currentTimeMillis() - startTime);

        } catch (Exception e) {
            log.error("‚ùå [{}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ lastSeen –¥–ª—è {}: {} (elapsed: {} –º—Å)",
                    clientId, phone, e.getMessage(), System.currentTimeMillis() - startTime);
            collectorProvider.getObject().incrementStat(clientId, 1, 0, 0, 1);
        }
    }



    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω (–∑–∞–º–µ–Ω—è–µ—Ç 8 –Ω–∞ 7, —É–±–∏—Ä–∞–µ—Ç –º—É—Å–æ—Ä).
     */
    private String normalizePhone(String rawPhone) {
        String digits = rawPhone.replaceAll("[^\\d]", "");
        return digits.startsWith("8") ? "7" + digits.substring(1) : digits;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–æ—Ñ—Ñ–ª–∞–π–Ω"
     * (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã, –µ—Å–ª–∏ —É–∂–µ —Å—Ç–æ–∏—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "–Ω–∞–∑–Ω–∞—á–µ–Ω").
     */
    private boolean shouldMarkOffline(Lead lead) {
        String currentStatus = lead.getLidStatus();
        return currentStatus == null ||
                currentStatus.isBlank() ||
                currentStatus.equalsIgnoreCase("–û—Ñ—Ñ–ª–∞–π–Ω");
    }


}








