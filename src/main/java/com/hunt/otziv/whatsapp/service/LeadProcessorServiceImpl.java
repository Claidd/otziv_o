package com.hunt.otziv.whatsapp.service;

import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.repository.LeadsRepository;
import com.hunt.otziv.whatsapp.config.WhatsAppProperties;
import com.hunt.otziv.whatsapp.dto.StatDto;
import com.hunt.otziv.whatsapp.service.service.AdminNotifierService;
import com.hunt.otziv.whatsapp.service.service.LeadProcessorService;
import com.hunt.otziv.whatsapp.service.service.WhatsAppService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.net.SocketTimeoutException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;


@Service
@Slf4j
@RequiredArgsConstructor
public class LeadProcessorServiceImpl implements LeadProcessorService {

    @Value("${whatsapp.ban-protection.maxFailures:5}")
    private int maxFailures;

    @Value("${whatsapp.ban-protection.dailyLimit:30}")
    private int dailyMessageLimit;

    @Value("${whatsapp.ban-protection.minDelay:5}")
    private int minDelay;

    @Value("${whatsapp.ban-protection.maxDelay:30}")
    private int maxDelay;

    private LocalTime startTime;
    private LocalTime endTime;

    private final LeadsRepository leadRepository;
    private final WhatsAppService whatsAppService;
    private final AdminNotifierService adminNotifierService;
    private final ObjectProvider<LeadSenderServiceImpl> leadSenderServiceProvider;

    private static final Set<String> finishedClients = ConcurrentHashMap.newKeySet();
    private static final AtomicBoolean notificationSent = new AtomicBoolean(false);

    public static final String STATUS_NEW = "–ù–æ–≤—ã–π";
    public static final String STATUS_SENT = "–ö —Ä–∞—Å—Å—ã–ª–∫–µ";

    private List<WhatsAppProperties.ClientConfig> operatorClients;

    private final Map<String, AtomicInteger> failedAttemptsPerClient = new ConcurrentHashMap<>();
    private final Map<String, AtomicInteger> dailyMessageCount = new ConcurrentHashMap<>();

    // —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–æ–∫
    private final Map<String, StatDto> statsPerClient = new ConcurrentHashMap<>();

    private final AtomicInteger globalFailureCounter = new AtomicInteger(0);
    private static final int GLOBAL_FAILURE_LIMIT = 10; // –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –ø–æ–¥—Ä—è–¥ –Ω–µ—É–¥–∞—á



    @Transactional
    @Override
    public void processLead(WhatsAppProperties.ClientConfig client) {
        Long telephoneId = Long.valueOf(client.getId().replace("client", ""));
        log.info("üìû telephoneId: {}", telephoneId);

        if (operatorClients == null) {
            operatorClients = leadSenderServiceProvider.getIfAvailable().getActiveOperatorClients();
        }

        Optional<Lead> leadOpt = leadRepository
                .findFirstByTelephone_IdAndLidStatusAndCreateDateLessThanEqualOrderByCreateDateAsc(
                        telephoneId, STATUS_NEW, LocalDate.now());

        if (leadOpt.isEmpty()) {
            log.info("üîÅ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} ({}). –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è", telephoneId, client.getId());
            finishedClients.add(client.getId());
            Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId());
            checkAllClientsFinished();
            return;
        }

        Lead lead = leadOpt.get();
        log.info("üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–¥: {}", lead);

        int delaySeconds = ThreadLocalRandom.current().nextInt(minDelay, maxDelay + 1);
        log.info("‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ {} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {}", delaySeconds, client.getId());

        try {
            Thread.sleep(delaySeconds * 1000L);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è {}", lead.getTelephoneLead());
        }

        dailyMessageCount.putIfAbsent(client.getId(), new AtomicInteger(0));
        int sentToday = dailyMessageCount.get(client.getId()).incrementAndGet();

        if (sentToday > dailyMessageLimit) {
            log.warn("üìõ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º.", dailyMessageLimit, client.getId());
            finishedClients.add(client.getId());
            Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId());
            checkAllClientsFinished();
            return;
        }

        String message = lead.getTelephone().getBeginText();
        String result = sendWithRetry(client.getId(), normalizePhone(lead.getTelephoneLead()), message);

        log.info("üì§ –û—Ç–≤–µ—Ç –æ—Ç sendMessage: {}", result);

        if (result != null && !result.isBlank() && result.contains("ok")) {
            lead.setLidStatus(STATUS_SENT);
            lead.setUpdateStatus(LocalDate.now());
            leadRepository.save(lead);
            failedAttemptsPerClient.put(client.getId(), new AtomicInteger(0));
            statsPerClient.putIfAbsent(client.getId(), new StatDto(client.getId(), 0, 0, null, null, new HashSet<>()));
            statsPerClient.get(client.getId()).incrementSuccess(lead.getId());
            globalFailureCounter.set(0);

        } else {
            log.warn("‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", client.getId());

            failedAttemptsPerClient.putIfAbsent(client.getId(), new AtomicInteger(0));
            int failures = failedAttemptsPerClient.get(client.getId()).incrementAndGet();
            statsPerClient.putIfAbsent(client.getId(), new StatDto(client.getId(), 0, 0, null, null, new HashSet<>()));
            statsPerClient.get(client.getId()).incrementFail(lead.getId());

            int globalFailures = globalFailureCounter.incrementAndGet();
            if (globalFailures >= GLOBAL_FAILURE_LIMIT) {
                log.error("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–±–æ–µ–≤. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!", globalFailures);
                operatorClients.forEach(c ->
                        Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable())
                                .stopClientScheduler(c.getId())
                );
                adminNotifierService.notifyAdmin("üö® –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±–æ–π: –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ —Å–µ—Ä–∏–∏ –æ—à–∏–±–æ–∫");
            }



            if (failures >= maxFailures) {
                log.error("üö´ –ö–ª–∏–µ–Ω—Ç {} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –æ—à–∏–±–æ–∫ ({}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.", client.getId(), failures);
                finishedClients.add(client.getId());
                Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId());
                adminNotifierService.notifyAdmin(String.format("üö´ –ö–ª–∏–µ–Ω—Ç %s –æ—Ç–∫–ª—é—á—ë–Ω –ø–æ—Å–ª–µ %d –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥.", client.getId(), failures));
                checkAllClientsFinished();
            }
        }
    }

    private void checkAllClientsFinished() {
        if (operatorClients == null) return;

        if (!notificationSent.get() && finishedClients.size() == operatorClients.size()) {
            notificationSent.set(true);
            endTime = LocalTime.now(ZoneId.of("Asia/Irkutsk"));

            int totalSuccess = statsPerClient.values().stream().mapToInt(StatDto::getSuccess).sum();
            int totalFail = statsPerClient.values().stream().mapToInt(StatDto::getFail).sum();

            StringBuilder sb = new StringBuilder("\uD83D\uDCC8 –ò—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º:\n");

            for (StatDto stat : statsPerClient.values()) {
                sb.append(stat.toReportLine()).append("\n");
            }

            sb.append("\n\uD83D\uDCCA –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ‚úÖ ")
                    .append(totalSuccess)
                    .append(" / ‚ùå ")
                    .append(totalFail)
                    .append(" (–∏—Ç–æ–≥–æ: ")
                    .append(totalSuccess + totalFail)
                    .append(")");

            sb.append(" \uD83D\uDD53 –í—Ä–µ–º—è: —Å ")
                    .append(startTime != null ? startTime.format(DateTimeFormatter.ofPattern("HH:mm")) : "--:--")
                    .append(" –¥–æ ")
                    .append(endTime != null ? endTime.format(DateTimeFormatter.ofPattern("HH:mm")) : "--:--");

            log.info(sb.toString());
            adminNotifierService.notifyAdmin(sb.toString());
        }
    }



    private String normalizePhone(String rawPhone) {
        String digits = rawPhone.replaceAll("[^\\d]", "");
        return digits.startsWith("8") ? "7" + digits.substring(1) : digits;
    }

    public void resetState() {
        failedAttemptsPerClient.clear();
        dailyMessageCount.clear();
        statsPerClient.clear();
        log.info("‚ôªÔ∏è LeadProcessor: —Å–±—Ä–æ—à–µ–Ω—ã —Å—á—ë—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫, –ª–∏–º–∏—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π");
    }

    private String sendWithRetry(String clientId, String phone, String message) {
        int maxAttempts = 2;
        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                return whatsAppService.sendMessage(clientId, phone, message);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {}: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp –¥–ª—è {}: {}", attempt, clientId, e.getMessage());

                if (attempt == maxAttempts) {
                    log.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {} –∏—Å—á–µ—Ä–ø–∞–Ω—ã", clientId);
                    return null;
                }

                try {
                    Thread.sleep(2000L);
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                    return null;
                }
            }
        }
        return null;
    }


}


