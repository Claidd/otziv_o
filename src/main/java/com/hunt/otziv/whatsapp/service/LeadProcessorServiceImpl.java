package com.hunt.otziv.whatsapp.service;

import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.repository.LeadsRepository;
import com.hunt.otziv.whatsapp.config.WhatsAppProperties;
import com.hunt.otziv.whatsapp.service.service.AdminNotifierService;
import com.hunt.otziv.whatsapp.service.service.LeadProcessorService;
import com.hunt.otziv.whatsapp.service.service.WhatsAppService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;


@Service
@Slf4j
@RequiredArgsConstructor
public class LeadProcessorServiceImpl implements LeadProcessorService {

    private final LeadsRepository leadRepository;
    private final WhatsAppService whatsAppService;
    private final AdminNotifierService adminNotifierService; // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    private final WhatsAppProperties properties;
    private final ObjectProvider<LeadSenderServiceImpl> leadSenderServiceProvider; // –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ

    private static final Set<String> finishedClients = ConcurrentHashMap.newKeySet();
    private static final AtomicBoolean notificationSent = new AtomicBoolean(false);

    public static final String STATUS_NEW = "–ù–æ–≤—ã–π";
    public static final String STATUS_SENT = "–ö —Ä–∞—Å—Å—ã–ª–∫–µ";

    private final AtomicInteger totalSentMessages = new AtomicInteger(0);


    @Transactional
    @Override
    public void processLead(WhatsAppProperties.ClientConfig client) {
        Long telephoneId = Long.valueOf(client.getId().replace("client", ""));
        log.info("telephoneId: {}", telephoneId);

        Optional<Lead> leadOpt = leadRepository
                .findFirstByTelephone_IdAndLidStatusAndCreateDateLessThanEqualOrderByCreateDateAsc(
                        telephoneId,
                        STATUS_NEW,
                        LocalDate.now()
                );

        if (leadOpt.isEmpty()) {
            log.info("üîÅ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} ({}). –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è", telephoneId, client.getId());
            finishedClients.add(client.getId());
            Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId()); // üí• –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            checkAllClientsFinished();
            return;
        }

        Lead lead = leadOpt.get();
        log.info("lead: {}", lead);

        String message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...";
        String result = whatsAppService.sendMessage(client.getId(), normalizePhone(lead.getTelephoneLead()), message);

        log.info("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}", result);

        // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        if (result != null && !result.isBlank() && result.contains("ok")) {
            lead.setLidStatus(STATUS_SENT);
            lead.setUpdateStatus(LocalDate.now());
            leadRepository.save(lead);
            totalSentMessages.incrementAndGet(); // ‚úÖ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        } else {
            log.warn("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω");
        }
    }

    private void checkAllClientsFinished() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É
        if (!notificationSent.get() && finishedClients.size() == properties.getClients().size()) {
            notificationSent.set(true);
            String message = "‚úÖ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –ª–∏–¥–æ–≤. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: " + totalSentMessages.get();
            log.info(message);
            adminNotifierService.notifyAdmin(message);
        }
    }

    private String normalizePhone(String rawPhone) {
        String digits = rawPhone.replaceAll("[^\\d]", "");
        if (digits.startsWith("8")) {
            return "7" + digits.substring(1);
        }
        return digits;
    }
} // –∫–æ–Ω–µ—Ü LeadProcessorServiceImpl

