package com.hunt.otziv.whatsapp.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hunt.otziv.l_lead.dto.TelephoneDTO;
import com.hunt.otziv.l_lead.event.LeadEventPublisher;
import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.model.LeadStatus;
import com.hunt.otziv.l_lead.repository.LeadsRepository;
import com.hunt.otziv.l_lead.services.serv.LeadStatusService;
import com.hunt.otziv.l_lead.services.serv.TelephoneService;
import com.hunt.otziv.text_generator.alltext.service.clas.HelloTextService;
import com.hunt.otziv.text_generator.alltext.service.clas.RandomTextService;
import com.hunt.otziv.whatsapp.config.WhatsAppProperties;
import com.hunt.otziv.whatsapp.dto.StatDto;
import com.hunt.otziv.whatsapp.dto.WhatsAppUserStatusDto;
import com.hunt.otziv.whatsapp.service.fichi.MessageHumanizer;
import com.hunt.otziv.whatsapp.service.service.AdminNotifierService;
import com.hunt.otziv.whatsapp.service.service.LeadProcessorService;
import com.hunt.otziv.whatsapp.service.service.WhatsAppService;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.task.TaskExecutor;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Stream;


@Service
@Slf4j
public class LeadProcessorServiceImpl implements LeadProcessorService {

    @Value("${whatsapp.ban-protection.maxFailures:5}")
    private int maxFailures;

    @Value("${whatsapp.ban-protection.dailyLimit:30}")
    private int dailyMessageLimit;


    @Value("${whatsapp.ban-protection.minDelay:5}")
    private int minDelay;

    @Value("${whatsapp.ban-protection.maxDelay:30}")
    private int maxDelay;

    @Value("${whatsapp.async.executor:leadDispatcherExecutor}")
    private String executorName;

    private LocalTime startTime;
    private LocalTime endTime;

    private final LeadsRepository leadRepository;
    private final WhatsAppService whatsAppService;
    private final AdminNotifierService adminNotifierService;
    private final ObjectProvider<LeadSenderServiceImpl> leadSenderServiceProvider;
    private final TelephoneService telephoneService;
    private final HelloTextService helloTextService;
    private final LeadEventPublisher leadEventPublisher;
    private final RandomTextService randomTextService;
    private final LeadStatusService leadStatusService;

    private final TaskExecutor taskExecutor;

    private static final Set<String> finishedClients = ConcurrentHashMap.newKeySet();
    private static final AtomicBoolean notificationSent = new AtomicBoolean(false);

    public static final String STATUS_NEW = "–ù–æ–≤—ã–π";
    public static final String STATUS_SENT = LeadStatus.SEND.title;
    public static final String STATUS_FAIL = "–û—à–∏–±–∫–∞";

    private List<WhatsAppProperties.ClientConfig> operatorClients;

    private final Map<String, AtomicInteger> failedAttemptsPerClient = new ConcurrentHashMap<>();
    private final Map<String, AtomicInteger> dailyMessageCount = new ConcurrentHashMap<>();
    private final Map<String, StatDto> statsPerClient = new ConcurrentHashMap<>();
    private final Map<String, AtomicInteger> controlSendCounter = new ConcurrentHashMap<>();
    private final Map<String, Integer> controlIntervalPerClient = new ConcurrentHashMap<>();

    private final AtomicInteger globalFailureCounter = new AtomicInteger(0);
    private static final int GLOBAL_FAILURE_LIMIT = 10;

    private List<String> myPhoneNumbers;
    private List<String> helloText;
    private List<String> randomText;
    private final MessageHumanizer humanizer = new MessageHumanizer();


    @Autowired
    public LeadProcessorServiceImpl(
            LeadsRepository leadRepository,
            WhatsAppService whatsAppService,
            AdminNotifierService adminNotifierService,
            ObjectProvider<LeadSenderServiceImpl> leadSenderServiceProvider,
            TelephoneService telephoneService,
            HelloTextService helloTextService, LeadEventPublisher leadEventPublisher, RandomTextService randomTextService,
            LeadStatusService leadStatusService,
            @Qualifier("leadDispatcherExecutor") TaskExecutor taskExecutor
    ) {
        this.leadRepository = leadRepository;
        this.whatsAppService = whatsAppService;
        this.adminNotifierService = adminNotifierService;
        this.leadSenderServiceProvider = leadSenderServiceProvider;
        this.telephoneService = telephoneService;
        this.helloTextService = helloTextService;
        this.leadEventPublisher = leadEventPublisher;
        this.randomTextService = randomTextService;
        this.leadStatusService = leadStatusService;
        this.taskExecutor = taskExecutor;
    }

    @PostConstruct
    public void initTextTemplates() {
        helloText = helloTextService.findAllTexts();
        randomText = randomTextService.findAllTexts();
        myPhoneNumbers = Stream.concat(
                telephoneService.getAllTelephones().stream().map(TelephoneDTO::getNumber),
                Stream.of("79086431055", "79041256288")
        ).toList();
        log.info("üîÉ [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã helloText, randomText –∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫");
    }

    @Override
    public void processLead(WhatsAppProperties.ClientConfig client) {
        log.info("\n==================== [PROCESS LEAD] {} ====================", client.getId());

        if (startTime == null) {
            startTime = LocalTime.now(ZoneId.of("Asia/Irkutsk"));
        }

        String digits = client.getId().replaceAll("\\D+", "");
        Long telephoneId;
        try {
            telephoneId = Long.valueOf(digits);
        } catch (NumberFormatException e) {
            log.error("üü• [PROCESS] ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ clientId='{}'", client.getId(), e);
            return;
        }
        log.info("üìû [PROCESS] telephoneId: {}", telephoneId);

        if (operatorClients == null) {
            operatorClients = Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).getActiveOperatorClients();
        }

        Optional<Lead> leadOpt = leadRepository.findFirstByTelephone_IdAndLidStatusAndCreateDateLessThanEqualOrderByCreateDateAsc(
                telephoneId, STATUS_NEW, LocalDate.now());

        if (leadOpt.isEmpty()) {
            log.info("üì≠ [PROCESS] –ù–µ—Ç –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} ({}). –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è", telephoneId, client.getId());
            finishedClients.add(client.getId());
            Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId());
            checkAllClientsFinished();
            return;
        }

        Lead lead = leadOpt.get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ WhatsApp
        Optional<WhatsAppUserStatusDto> userStatusOpt = whatsAppService.checkActiveUser(client.getId(), normalizePhone(lead.getTelephoneLead()));
        if (userStatusOpt.isEmpty() || Boolean.FALSE.equals(userStatusOpt.get().getRegistered())) {
            log.warn("üìµ –ù–æ–º–µ—Ä {} –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", lead.getTelephoneLead());
            leadStatusService.prepareLeadForSending(lead, "–ù–µ—Ç –≤–∞—Ç—Å–∞–ø");

            statsPerClient.putIfAbsent(client.getId(),
                    new StatDto(client.getId(), 0, 0, 0, 0, 0,null, null, new HashSet<>()));
            statsPerClient.get(client.getId()).incrementNoWhatsApp(lead.getId());
            return;
        }

        log.info("""
    üì® [PROCESS LEAD DETAILS]
    üÜî –õ–∏–¥ ID: {}
    üì± –¢–µ–ª–µ—Ñ–æ–Ω: {}
    üìã –°—Ç–∞—Ç—É—Å: {}
    üïí –í—Ä–µ–º—è: {}
    """, lead.getId(), lead.getTelephoneLead(), lead.getLidStatus(), LocalDateTime.now());

        leadStatusService.prepareLeadForSending(lead, STATUS_SENT);

        taskExecutor.execute(() -> {
            int delaySeconds = ThreadLocalRandom.current().nextInt(minDelay, maxDelay + 1);
            try {
                TimeUnit.SECONDS.sleep(delaySeconds);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }

            dailyMessageCount.putIfAbsent(client.getId(), new AtomicInteger(0));
            int sentToday = dailyMessageCount.get(client.getId()).incrementAndGet();

            if (sentToday > dailyMessageLimit) {
                log.warn("üü• [PROCESS] üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", dailyMessageLimit, client.getId());
                finishedClients.add(client.getId());
                Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId());
                checkAllClientsFinished();
                return;
            }

            String rawMessage = helloText.get(ThreadLocalRandom.current().nextInt(helloText.size()));
            String message = humanizer.generate(rawMessage);
            log.debug("üì® [MESSAGE] {}", message);
            String result = sendWithRetry(client.getId(), normalizePhone(lead.getTelephoneLead()), message, lead);

            if ("not_whatsapp".equals(result)) {
                log.warn("üìµ –ù–æ–º–µ—Ä {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–Ω–µ—Ç –≤–∞—Ç—Å–∞–ø'", lead.getTelephoneLead());
                leadStatusService.prepareLeadForSending(lead, "–ù–µ—Ç –≤–∞—Ç—Å–∞–ø");

                statsPerClient.putIfAbsent(client.getId(),
                        new StatDto(client.getId(), 0, 0, 0, 0, 0, null, null, new HashSet<>()));
                statsPerClient.get(client.getId()).incrementNoWhatsApp(lead.getId());
                return;
            }

            if (result != null && !result.isBlank() && result.contains("ok")) {
                log.info("üü© [PROCESS] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {}", client.getId());
                failedAttemptsPerClient.put(client.getId(), new AtomicInteger(0));
                statsPerClient.putIfAbsent(client.getId(),
                        new StatDto(client.getId(), 0, 0, 0, 0, 0, null, null, new HashSet<>()));
                statsPerClient.get(client.getId()).incrementSuccess(lead.getId());
                globalFailureCounter.set(0);

                AtomicInteger counter = controlSendCounter.computeIfAbsent(client.getId(), k -> new AtomicInteger(0));
                int count = counter.incrementAndGet();
                if (count > 10000) counter.set(0);

                int interval = controlIntervalPerClient.computeIfAbsent(client.getId(), k -> ThreadLocalRandom.current().nextInt(2, 6));
                if (count % interval == 0) {
                    sendControlMessage(client.getId(), telephoneId, delaySeconds);
                    controlIntervalPerClient.put(client.getId(), ThreadLocalRandom.current().nextInt(2, 6));
                }
            } else {
                log.warn("üü• [PROCESS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {}", client.getId());
                handleFailure(client, lead);
            }

            log.info("==================== [END PROCESS LEAD] {} ====================\n", client.getId());
        });
    }





    private String normalizePhone(String rawPhone) {
        String digits = rawPhone.replaceAll("[^\\d]", "");
        return digits.startsWith("8") ? "7" + digits.substring(1) : digits;
    }



    private String sendWithRetry(String clientId, String phone, String message, Lead lead) {
        int maxAttempts = 2;

        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                String response = whatsAppService.sendMessage(clientId, phone, message);

                if (response == null || response.isBlank()) {
                    log.warn("‚ö†Ô∏è [RETRY] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", clientId);
                    continue;
                }

                if (response.contains("\"status\":\"not_whatsapp\"")) {
                    log.warn("üìµ [CHECK] –ù–æ–º–µ—Ä {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp", phone);
                    return "not_whatsapp";
                }

                if (response.contains("\"status\":\"ok\"")) {
                    return "ok";
                }

                if (response.contains("\"status\":\"error\"")) {
                    log.error("‚ùå [RETRY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}: {}", clientId, response);
                    continue;
                }

                return response;

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è [RETRY] –ü–æ–ø—ã—Ç–∫–∞ {}: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp –¥–ª—è {}: {}", attempt, clientId, e.getMessage());
                if (attempt == maxAttempts) {
                    log.error("‚ùå [RETRY] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {} –∏—Å—á–µ—Ä–ø–∞–Ω—ã", clientId);
                    return null;
                }

                try {
                    TimeUnit.SECONDS.sleep(2);
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                    return null;
                }
            }
        }

        return null;
    }








    private String extractJsonValue(String json, String key) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode node = mapper.readTree(json);
            JsonNode valueNode = node.get(key);
            return valueNode != null ? valueNode.asText() : null;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è [PARSE] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON ({}): {}", key, e.getMessage());
            return null;
        }
    }




    private void sendControlMessage(String clientId, Long telephoneId, int delaySeconds) {
        String clientPhoneNumber = telephoneService.getTelephoneById(telephoneId).getNumber();

        if (myPhoneNumbers == null || myPhoneNumbers.isEmpty()) {
            log.warn("üìµ [CONTROL] –ù–µ—Ç —Å–≤–æ–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏");
            return;
        }
        if (randomText == null || randomText.isEmpty()) {
            log.warn("üìù [CONTROL] –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏");
            return;
        }

        String message2 = randomText.get(ThreadLocalRandom.current().nextInt(randomText.size()));
        List<String> availablePhones = myPhoneNumbers.stream()
                .filter(p -> !normalizePhone(p).equals(normalizePhone(clientPhoneNumber)))
                .toList();

        if (availablePhones.isEmpty()) {
            log.warn("üìµ [CONTROL] –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏—Å–∫–ª—é—á–∞—è —Å–≤–æ–π)");
            return;
        }

        String myTelephone = availablePhones.get(ThreadLocalRandom.current().nextInt(availablePhones.size()));

        CompletableFuture.runAsync(() -> {
            try {
                TimeUnit.SECONDS.sleep(delaySeconds);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }

            String result2 = sendWithRetry(clientId, normalizePhone(myTelephone), message2, null);
            if (result2 != null && !result2.isBlank() && result2.contains("ok")) {
                log.info("üì® [CONTROL] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {}: {}", myTelephone, message2);
            } else {
                log.warn("‚ö†Ô∏è [CONTROL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {}: {}", myTelephone, message2);
            }
        });
    }

    private void handleFailure(WhatsAppProperties.ClientConfig client, Lead lead) {
        String clientId = client.getId();
        log.warn("‚ö†Ô∏è [FAILURE] –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", clientId);

        failedAttemptsPerClient.putIfAbsent(clientId, new AtomicInteger(0));
        int failures = failedAttemptsPerClient.get(clientId).incrementAndGet();

        statsPerClient.putIfAbsent(client.getId(),
                new StatDto(client.getId(), 0, 0, 0, 0, 0, null, null, new HashSet<>()));

        statsPerClient.get(clientId).incrementFail(lead.getId());

        int globalFailures = globalFailureCounter.incrementAndGet();
        if (globalFailures >= GLOBAL_FAILURE_LIMIT) {
            log.error("üö® [FAILURE] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–±–æ–µ–≤. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!", globalFailures);
            operatorClients.forEach(c ->
                    Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(c.getId()));
            adminNotifierService.notifyAdmin("üö® –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±–æ–π: –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ —Å–µ—Ä–∏–∏ –æ—à–∏–±–æ–∫");
        }

        if (failures >= maxFailures) {
            log.error("üö´ [FAILURE] –ö–ª–∏–µ–Ω—Ç {} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –æ—à–∏–±–æ–∫. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º.", clientId);
            finishedClients.add(clientId);
            Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(clientId);
            adminNotifierService.notifyAdmin(String.format("üö´ –ö–ª–∏–µ–Ω—Ç %s –æ—Ç–∫–ª—é—á—ë–Ω –ø–æ—Å–ª–µ %d –æ—à–∏–±–æ–∫.", clientId, failures));
            checkAllClientsFinished();
        }

        leadStatusService.prepareLeadForSending(lead, STATUS_FAIL);
    }

    @Override
    public void checkAllClientsFinished() {
        List<WhatsAppProperties.ClientConfig> clients = getOperatorClients();
        if (!notificationSent.get() && finishedClients.size() == clients.size()) {
            notificationSent.set(true);
            endTime = LocalTime.now(ZoneId.of("Asia/Irkutsk"));

            int totalSuccess = statsPerClient.values().stream().mapToInt(StatDto::getSuccess).sum();
            int totalFailOnly = statsPerClient.values().stream().mapToInt(StatDto::getFail).sum();
            int totalNoWhatsApp = statsPerClient.values().stream().mapToInt(StatDto::getNoWhatsApp).sum();

            StringBuilder sb = new StringBuilder("üìà –ò—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º:\n");
            statsPerClient.values().forEach(stat -> sb.append(stat.toReportLine()).append("\n"));

            sb.append("\nüìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ‚úÖ ")
                    .append(totalSuccess)
                    .append(" / ‚ùå ")
                    .append(totalFailOnly)
                    .append(" / üö´ ")
                    .append(totalNoWhatsApp)
                    .append(" (–∏—Ç–æ–≥–æ: ")
                    .append(totalSuccess + totalFailOnly + totalNoWhatsApp)
                    .append(")");

            sb.append(" üïì –í—Ä–µ–º—è: —Å ")
                    .append(startTime != null ? startTime.format(DateTimeFormatter.ofPattern("HH:mm")) : "--:--")
                    .append(" –¥–æ ")
                    .append(endTime != null ? endTime.format(DateTimeFormatter.ofPattern("HH:mm")) : "--:--");

            log.info("\n==================== [SUMMARY] ====================\n{}\n====================================================", sb);
            adminNotifierService.notifyAdmin(sb.toString());
        }
    }



    public void resetState() {
        failedAttemptsPerClient.clear();
        dailyMessageCount.clear();
        statsPerClient.clear();
        myPhoneNumbers = Stream.concat(
                telephoneService.getAllTelephones().stream().map(TelephoneDTO::getNumber),
                Stream.of("79086431055", "79041256288")
        ).toList();
        helloText = helloTextService.findAllTexts();
        randomText = randomTextService.findAllTexts();
        log.info("‚ôªÔ∏è [RESET] –°–±—Ä–æ—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–≥—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ —Ç–µ–∫—Å—Ç—ã");
    }

    private List<WhatsAppProperties.ClientConfig> getOperatorClients() {
        if (operatorClients == null) {
            LeadSenderServiceImpl sender = leadSenderServiceProvider.getIfAvailable();
            if (sender != null) {
                operatorClients = sender.getActiveOperatorClients();
            } else {
                log.warn("‚ö†Ô∏è [FALLBACK] LeadSenderService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                operatorClients = Collections.emptyList();
            }
        }
        return operatorClients;
    }


}







//        Optional<Boolean> registeredOpt = whatsAppService.isRegisteredInWhatsApp(client.getId(), normalizePhone(lead.getTelephoneLead()));
//        boolean notRegisteredOrUnknown = registeredOpt.isEmpty() || Boolean.FALSE.equals(registeredOpt.get());
//
//        if (notRegisteredOrUnknown) {
//            if (registeredOpt.isEmpty()) {
//                log.warn("üìµ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä {} –≤ WhatsApp ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", lead.getTelephoneLead());
//            } else {
//                log.warn("üìµ –ù–æ–º–µ—Ä {} –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", lead.getTelephoneLead());
//            }
//
//            leadStatusService.prepareLeadForSending(lead, "–ù–µ—Ç –≤–∞—Ç—Å–∞–ø");
//
//            statsPerClient.putIfAbsent(client.getId(),
//                    new StatDto(client.getId(), 0, 0, 0, 0, null, null, new HashSet<>()));
//            statsPerClient.get(client.getId()).incrementNoWhatsApp(lead.getId());
//            return;
//        }
//
//        Optional<LocalDateTime> lastSeenOpt = whatsAppService.fetchLastSeen(client.getId(), normalizePhone(lead.getTelephoneLead()));
//        if (lastSeenOpt.isPresent()) {
//            LocalDateTime lastSeen = lastSeenOpt.get();
//            if (lastSeen.isBefore(LocalDateTime.now().minusDays(2))) {
//                log.warn("‚õî [SKIP] –õ–∏–¥ {} –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ‚Äî lastSeen –±–æ–ª–µ–µ 2 –¥–Ω–µ–π –Ω–∞–∑–∞–¥: {}", lead.getId(), lastSeen);
//                leadStatusService.prepareLeadForSending(lead, "–ù–µ –≤ —Å–µ—Ç–∏");
//
//                statsPerClient.putIfAbsent(client.getId(),
//                        new StatDto(client.getId(), 0, 0, 0, 0, null, null, new HashSet<>()));
//                statsPerClient.get(client.getId()).incrementNotOnline(lead.getId());
//                return;
//            }
//        } else {
//            log.warn("üì¥ [SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å lastSeen ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞");
//            leadStatusService.prepareLeadForSending(lead, "–ù–µ –≤ —Å–µ—Ç–∏");
//
//            statsPerClient.putIfAbsent(client.getId(),
//                    new StatDto(client.getId(), 0, 0, 0, 0, null, null, new HashSet<>()));
//            statsPerClient.get(client.getId()).incrementNotOnline(lead.getId());
//            return;
//        }

//    private String sendWithRetry(String clientId, String phone, String message) {
//        int maxAttempts = 2;
//
//        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
//            try {
//                String response = whatsAppService.sendMessage(clientId, phone, message);
//
//                if (response == null || response.isBlank()) {
//                    log.warn("‚ö†Ô∏è [RETRY] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", clientId);
//                    continue;
//                }
//
//                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å not_whatsapp
//                if (response.contains("\"status\":\"not_whatsapp\"")) {
//                    log.warn("üìµ [CHECK] –ù–æ–º–µ—Ä {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp", phone);
//                    return "not_whatsapp";
//                }
//
//                if (response.contains("\"status\":\"ok\"")) {
//                    return "ok";
//                }
//
//                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —è–≤–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç "error"
//                if (response.contains("\"status\":\"error\"")) {
//                    log.error("‚ùå [RETRY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}: {}", clientId, response);
//                    continue;
//                }
//
//                return response;
//
//            } catch (Exception e) {
//                log.warn("‚ö†Ô∏è [RETRY] –ü–æ–ø—ã—Ç–∫–∞ {}: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp –¥–ª—è {}: {}", attempt, clientId, e.getMessage());
//                if (attempt == maxAttempts) {
//                    log.error("‚ùå [RETRY] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {} –∏—Å—á–µ—Ä–ø–∞–Ω—ã", clientId);
//                    return null;
//                }
//
//                try {
//                    TimeUnit.SECONDS.sleep(2);
//                } catch (InterruptedException ex) {
//                    Thread.currentThread().interrupt();
//                    return null;
//                }
//            }
//        }
//        return null;
//    }
//@Override
//public void processLead(WhatsAppProperties.ClientConfig client) {
//    log.info("\n==================== [PROCESS LEAD] {} ====================", client.getId());
//
//    if (startTime == null) {
//        startTime = LocalTime.now(ZoneId.of("Asia/Irkutsk"));
//    }
//
//    String digits = client.getId().replaceAll("\\D+", "");
//    Long telephoneId;
//    try {
//        telephoneId = Long.valueOf(digits);
//    } catch (NumberFormatException e) {
//        log.error("üü• [PROCESS] ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ clientId='{}'", client.getId(), e);
//        return;
//    }
//    log.info("üìû [PROCESS] telephoneId: {}", telephoneId);
//
//    if (operatorClients == null) {
//        operatorClients = Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).getActiveOperatorClients();
//    }
//
//    Optional<Lead> leadOpt = leadRepository.findFirstByTelephone_IdAndLidStatusAndCreateDateLessThanEqualOrderByCreateDateAsc(
//            telephoneId, STATUS_NEW, LocalDate.now());
//
//    if (leadOpt.isEmpty()) {
//        log.info("üì≠ [PROCESS] –ù–µ—Ç –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} ({}). –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è", telephoneId, client.getId());
//        finishedClients.add(client.getId());
//        Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId());
//        checkAllClientsFinished();
//        return;
//    }
//
//    Lead lead = leadOpt.get();
//
//    Optional<WhatsAppUserStatusDto> userStatusOpt = whatsAppService.checkActiveUser(client.getId(), normalizePhone(lead.getTelephoneLead()));
//    if (userStatusOpt.isEmpty()) {
//        log.warn("üìµ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", lead.getTelephoneLead());
//        leadStatusService.prepareLeadForSending(lead, "–ù–µ—Ç –≤–∞—Ç—Å–∞–ø");
//        return;
//    }
//
//    WhatsAppUserStatusDto userStatus = userStatusOpt.get();
//    if (Boolean.FALSE.equals(userStatus.getRegistered())) {
//        log.warn("üìµ –ù–æ–º–µ—Ä {} –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", lead.getTelephoneLead());
//        leadStatusService.prepareLeadForSending(lead, "–ù–µ—Ç –≤–∞—Ç—Å–∞–ø");
//        return;
//    }
//
//    if (userStatus.getLastSeen() == null) {
//        log.warn("üì¥ lastSeen –¥–ª—è {} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", lead.getTelephoneLead());
//        leadStatusService.prepareLeadForSending(lead, "–ù–µ –≤ —Å–µ—Ç–∏");
//        return;
//    }
//
//    log.info("üì∂ lastSeen –¥–ª—è {}: {}", lead.getTelephoneLead(), userStatus.getLastSeen());
//
//
//    log.info("""
//            üì® [PROCESS LEAD DETAILS]
//            üÜî –õ–∏–¥ ID: {}
//            üì± –¢–µ–ª–µ—Ñ–æ–Ω: {}
//            üìã –°—Ç–∞—Ç—É—Å: {}
//            üïí –í—Ä–µ–º—è: {}
//            """, lead.getId(), lead.getTelephoneLead(), lead.getLidStatus(), LocalDateTime.now());
//
//    leadStatusService.prepareLeadForSending(lead, STATUS_SENT);
//
//    taskExecutor.execute(() -> {
//        int delaySeconds = ThreadLocalRandom.current().nextInt(minDelay, maxDelay + 1);
//        try {
//            TimeUnit.SECONDS.sleep(delaySeconds);
//        } catch (InterruptedException e) {
//            Thread.currentThread().interrupt();
//        }
//
//        dailyMessageCount.putIfAbsent(client.getId(), new AtomicInteger(0));
//        int sentToday = dailyMessageCount.get(client.getId()).incrementAndGet();
//
//        if (sentToday > dailyMessageLimit) {
//            log.warn("üü• [PROCESS] üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}", dailyMessageLimit, client.getId());
//            finishedClients.add(client.getId());
//            Objects.requireNonNull(leadSenderServiceProvider.getIfAvailable()).stopClientScheduler(client.getId());
//            checkAllClientsFinished();
//            return;
//        }
//
//
//        String rawMessage = helloText.get(ThreadLocalRandom.current().nextInt(helloText.size()));
//        String message = humanizer.generate(rawMessage);
//        log.debug("üì® [MESSAGE] {}", message);
//        String result = sendWithRetry(client.getId(), normalizePhone(lead.getTelephoneLead()), message, lead);
//
//        if ("not_whatsapp".equals(result)) {
//            log.warn("üìµ –ù–æ–º–µ—Ä {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–Ω–µ—Ç –≤–∞—Ç—Å–∞–ø'", lead.getTelephoneLead());
//            leadStatusService.prepareLeadForSending(lead, "–ù–µ—Ç –≤–∞—Ç—Å–∞–ø");
//
//            statsPerClient.putIfAbsent(client.getId(),
//                    new StatDto(client.getId(), 0, 0, 0, 0, null, null, new HashSet<>()));
//
//            statsPerClient.get(client.getId()).incrementNoWhatsApp(lead.getId());
//            return;
//        }
//        if ("offline".equals(result)) {
//            log.warn("üì¥ –ù–æ–º–µ—Ä {} –Ω–µ –±—ã–ª –≤ —Å–µ—Ç–∏ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–Ω–µ –≤ —Å–µ—Ç–∏'", lead.getTelephoneLead());
//            leadStatusService.prepareLeadForSending(lead, "–ù–µ –≤ —Å–µ—Ç–∏");
//
//            statsPerClient.putIfAbsent(client.getId(),
//                    new StatDto(client.getId(), 0, 0, 0, 0, null, null, new HashSet<>()));
//
//            statsPerClient.get(client.getId()).incrementNotOnline(lead.getId());
//            return;
//        }
//        if (result != null && !result.isBlank() && result.contains("ok")) {
//            log.info("üü© [PROCESS] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {}", client.getId());
//            failedAttemptsPerClient.put(client.getId(), new AtomicInteger(0));
//            statsPerClient.putIfAbsent(client.getId(),
//                    new StatDto(client.getId(), 0, 0, 0, 0, null, null, new HashSet<>()));
//
//            statsPerClient.get(client.getId()).incrementSuccess(lead.getId()); // ‚úÖ —Ç–æ–ª—å–∫–æ success
//            globalFailureCounter.set(0);
//
//            AtomicInteger counter = controlSendCounter.computeIfAbsent(client.getId(), k -> new AtomicInteger(0));
//            int count = counter.incrementAndGet();
//            if (count > 10000) counter.set(0);
//
//            int interval = controlIntervalPerClient.computeIfAbsent(client.getId(), k -> ThreadLocalRandom.current().nextInt(2, 6));
//            if (count % interval == 0) {
//                sendControlMessage(client.getId(), telephoneId, delaySeconds);
//                controlIntervalPerClient.put(client.getId(), ThreadLocalRandom.current().nextInt(2, 6));
//            }
//        } else {
//            log.warn("üü• [PROCESS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {}", client.getId());
//            handleFailure(client, lead);
//        }
//
//        log.info("==================== [END PROCESS LEAD] {} ====================\n", client.getId());
//    });
//}

















// –î–û–ë–ê–í–¨ –≤ sendWithRetry –º–µ—Ç–æ–¥ LeadProcessorServiceImpl –ø—Ä–æ–≤–µ—Ä–∫—É last-seen:
//private String sendWithRetry(String clientId, String phone, String message, Lead lead) {
//    int maxAttempts = 2;
//
//    for (int attempt = 1; attempt <= maxAttempts; attempt++) {
//        try {
//            String response = whatsAppService.sendMessage(clientId, phone, message);
//
//            if (response == null || response.isBlank()) {
//                log.warn("‚ö†Ô∏è [RETRY] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", clientId);
//                continue;
//            }
//
//            // not_whatsapp
//            if (response.contains("\"status\":\"not_whatsapp\"")) {
//                log.warn("üìµ [CHECK] –ù–æ–º–µ—Ä {} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp", phone);
//                return "not_whatsapp";
//            }
//
//            // last_seen
//            if (response.contains("\"last_seen\"")) {
//                String lastSeenStr = extractJsonValue(response, "last_seen");
//                if (lastSeenStr != null) {
//                    Instant lastSeen = Instant.parse(lastSeenStr);
//                    ZonedDateTime irkutskTime = lastSeen.atZone(ZoneId.of("Asia/Irkutsk"));
//
//                    log.info("üì∂ [LAST SEEN] {} –±—ã–ª –≤ —Å–µ—Ç–∏: {}", phone, irkutskTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
//
//                    if (lastSeen.isBefore(Instant.now().minus(2, ChronoUnit.DAYS))) {
//                        log.warn("‚è±Ô∏è [SKIP] {} –Ω–µ –±—ã–ª –≤ —Å–µ—Ç–∏ –±–æ–ª–µ–µ 2 –¥–Ω–µ–π ({}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", phone, irkutskTime);
//                        if (lead != null) {
//                            leadStatusService.prepareLeadForSending(lead, "–ù–µ –≤ —Å–µ—Ç–∏");
//                            statsPerClient.putIfAbsent(clientId,
//                                    new StatDto(clientId, 0, 0, 0, 0, 0, null, null, new HashSet<>()));
//                            statsPerClient.get(clientId).incrementNotOnline(lead.getId());
//                        }
//                        return "offline";
//                    }
//                }
//            }
//
//
//
//            if (response.contains("\"status\":\"ok\"")) {
//                return "ok";
//            }
//
//            if (response.contains("\"status\":\"error\"")) {
//                log.error("‚ùå [RETRY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}: {}", clientId, response);
//                continue;
//            }
//
//            return response;
//
//        } catch (Exception e) {
//            log.warn("‚ö†Ô∏è [RETRY] –ü–æ–ø—ã—Ç–∫–∞ {}: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp –¥–ª—è {}: {}", attempt, clientId, e.getMessage());
//            if (attempt == maxAttempts) {
//                log.error("‚ùå [RETRY] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {} –∏—Å—á–µ—Ä–ø–∞–Ω—ã", clientId);
//                return null;
//            }
//
//            try {
//                TimeUnit.SECONDS.sleep(2);
//            } catch (InterruptedException ex) {
//                Thread.currentThread().interrupt();
//                return null;
//            }
//        }
//    }
//
//    return null;
//}