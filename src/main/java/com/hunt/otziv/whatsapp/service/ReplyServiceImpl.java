package com.hunt.otziv.whatsapp.service;

import com.hunt.otziv.c_companies.model.Company;
import com.hunt.otziv.c_companies.services.CompanyService;
import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.model.Telephone;
import com.hunt.otziv.l_lead.services.serv.LeadService;
import com.hunt.otziv.text_generator.alltext.service.clas.OfferTextService;
import com.hunt.otziv.text_generator.alltext.service.clas.RandomTextService;
import com.hunt.otziv.whatsapp.dto.WhatsAppGroupReplyDTO;
import com.hunt.otziv.whatsapp.dto.WhatsAppReplyDTO;
import com.hunt.otziv.whatsapp.service.service.ReplyService;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.Pattern;

@Service
@Slf4j
@RequiredArgsConstructor
public class ReplyServiceImpl implements ReplyService {

    private final CompanyService companyService;
    private final LeadService leadService;
    private final OfferService offerService;
    private final NotificationService notificationService;
    private final OfferTextService offerTextService;

    private List<String> offerList;

    @PostConstruct
    public void initOfferTexts() {
        this.offerList = offerTextService.findAllTexts();
        log.info("\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüìÑ [INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –æ—Ñ—Ñ–µ—Ä–æ–≤\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê", offerList.size());
    }

    @Override
    public void processIncomingReply(WhatsAppReplyDTO reply) {
        log.info("\nüü¶ [REPLY] –í—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n‚îú‚îÄ –ö–ª–∏–µ–Ω—Ç: {}\n‚îú‚îÄ –¢–µ–ª–µ—Ñ–æ–Ω: {}\n‚îî‚îÄ –°–æ–æ–±—â–µ–Ω–∏–µ: {}",
                reply.getClientId(), reply.getFrom(), reply.getMessage());

        String telephoneNumber = reply.getFrom().replaceAll("@c\\.us$", "");
        log.debug("üîç –ò–∑–≤–ª–µ—á—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}", telephoneNumber);

        Optional<Lead> leadOpt = leadService.getByTelephoneLead(telephoneNumber);
        if (leadOpt.isEmpty()) {
            log.warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏–¥ –ø–æ –Ω–æ–º–µ—Ä—É {}", telephoneNumber);
            return;
        }

        Lead lead = leadOpt.get();

        if (!lead.isOffer()) {
            String messageText = reply.getMessage().toLowerCase();
            List<String> declineKeywords = List.of("–Ω–µ—Ç", "–Ω–µ –Ω–∞–¥–æ", "–Ω–µ –Ω—É–∂–Ω–æ", "–æ—Ç—Å—Ç–∞–Ω—å—Ç–µ", "–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "–Ω–µ —Ö–æ—á—É", "—Å–ø–∞–º", "—Ö–≤–∞—Ç–∏—Ç", "–æ—Ç–ø–∏—à–∏—Ç–µ—Å—å");

            if (declineKeywords.stream().anyMatch(messageText::contains)) {
                log.info("‚õî –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è: '{}'", messageText);
                return;
            }

            Telephone telephone = lead.getTelephone();
            if (telephone == null) {
                log.warn("‚ö†Ô∏è –£ –ª–∏–¥–∞ {} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", lead.getId());
                return;
            }

            String clientId = "client" + telephone.getId();
            if (offerList == null || offerList.isEmpty()) {
                log.warn("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ offerList –ø—É—Å—Ç ‚Äî –æ—Ñ—Ñ–µ—Ä –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
                return;
            }

            String offerText = offerList.get(ThreadLocalRandom.current().nextInt(offerList.size()));
            offerService.sendOfferAsync(lead, clientId, telephoneNumber, offerText);
            log.info("üì® –û—Ñ—Ñ–µ—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: –∫–ª–∏–µ–Ω—Ç {}", telephoneNumber);
        } else {
            notifyAdminIfMessageContainsLink(lead, reply);
            log.info("‚úÖ –û—Ñ—Ñ–µ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Ä–∞–Ω–µ–µ –∫–ª–∏–µ–Ω—Ç—É {}", telephoneNumber);
        }
    }

    private static final Pattern LINK_PATTERN = Pattern.compile("(https?://\\S+|www\\.\\S+|t\\.me/\\S+|vk\\.com/\\S+)", Pattern.CASE_INSENSITIVE);
    private final List<Long> adminChatIds = List.of(794146111L, 828987226L);

    private void notifyAdminIfMessageContainsLink(Lead lead, WhatsAppReplyDTO reply) {
        String message = reply.getMessage();
        if (message == null) return;

        String clientId = reply.getClientId();
        String telephone = lead.getTelephoneLead();

        String header = LINK_PATTERN.matcher(message).find()
                ? "‚úÖ *–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª –°–°–´–õ–ö–£ –ø–æ—Å–ª–µ –æ—Ñ—Ñ–µ—Ä–∞!*"
                : "\uD83D\uDD14 *–ö–ª–∏–µ–Ω—Ç –û–¢–í–ï–¢–ò–õ –ø–æ—Å–ª–µ –æ—Ñ—Ñ–µ—Ä–∞!*";

        String msg = String.format("""
            %s

            üÜî*–¢–µ–ª–µ—Ñ–æ–Ω :* `%s`
            üë§*–ö–ª–∏–µ–Ω—Ç:* `%s`

            üì© *–°–æ–æ–±—â–µ–Ω–∏–µ:*
            %s
            """,
                header,
                escapeMarkdown(clientId),
                escapeMarkdown(telephone),
                escapeMarkdown(message));

        notificationService.sendAdminAlert(msg, adminChatIds);
        log.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º: {}", telephone);
    }

    private String escapeMarkdown(String text) {
        if (text == null) return "";
        return text.replace("_", "\\_")
                .replace("*", "\\*")
                .replace("[", "\\[")
                .replace("`", "\\`")
                .replace("~", "\\~")
                .replace(">", "\\>");
    }

    @Override
    public void processGroupReply(WhatsAppGroupReplyDTO reply) {
        log.info("\nüü¶ [GROUP REPLY] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã"
                        + "\n‚îú‚îÄ –ì—Ä—É–ø–ø–∞: '{}'"
                        + "\n‚îú‚îÄ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (raw): '{}'"
                        + "\n‚îú‚îÄ –°–æ–æ–±—â–µ–Ω–∏–µ: '{}'"
                        + "\n‚îî‚îÄ GroupId: {}",
                reply.getGroupName(), reply.getFrom(), reply.getMessage(), reply.getGroupId());

        // 1. –ü–æ–∏—Å–∫ –ø–æ GroupId
        Optional<Company> optCompany = companyService.findByGroupId(reply.getGroupId());
        if (optCompany.isPresent()) {
            log.info("üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è '{}' –Ω–∞–ø—Ä—è–º—É—é –ø–æ GroupId: {}",
                    optCompany.get().getTitle(), reply.getGroupId());
        } else {
            log.info("üîç –ö–æ–º–ø–∞–Ω–∏—è –ø–æ GroupId {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é",
                    reply.getGroupId());

            // 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            String telephoneNumber = reply.getFrom().replaceAll("@c\\.us$", "");
            String rawName = reply.getGroupName();
            String title = rawName.contains(".")
                    ? rawName.substring(0, rawName.indexOf("."))
                    : rawName;

            log.debug("‚û° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω '{}' –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ '{}'", telephoneNumber, title);

            // 3. –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
            optCompany = companyService.getCompanyByTelephonAndTitle(telephoneNumber, title);

            if (optCompany.isEmpty()) {
                log.warn("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ GroupId {}, –Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É '{}' + –Ω–∞–∑–≤–∞–Ω–∏—é '{}'",
                        reply.getGroupId(), telephoneNumber, title);
                return;
            } else {
                log.info("üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è '{}' –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É '{}' –∏ –Ω–∞–∑–≤–∞–Ω–∏—é '{}'",
                        optCompany.get().getTitle(), telephoneNumber, title);
            }
        }

        // 4. –ü—Ä–∏–≤—è–∑–∫–∞ GroupId (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        Company found = optCompany.get();
        if (found.getGroupId() == null || found.getGroupId().isBlank()) {
            found.setGroupId(reply.getGroupId());
            companyService.save(found);
            log.info("üìå –ö–æ–º–ø–∞–Ω–∏—è '{}' (ID={}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ GroupId {}",
                    found.getTitle(), found.getId(), reply.getGroupId());
        } else {
            log.info("‚Ñπ –ö–æ–º–ø–∞–Ω–∏—è '{}' —É–∂–µ –∏–º–µ–µ—Ç GroupId: {}",
                    found.getTitle(), found.getGroupId());
        }

        log.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã '{}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply.getGroupName());
    }
}




