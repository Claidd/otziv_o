package com.hunt.otziv.l_lead.controller;

import com.hunt.otziv.l_lead.dto.LeadUpdateDto;
import com.hunt.otziv.l_lead.mapper.LeadMapper;
import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.repository.LeadsRepository;
import com.hunt.otziv.l_lead.repository.TelephoneRepository;
import com.hunt.otziv.l_lead.services.serv.LeadService;
import com.hunt.otziv.u_users.model.Manager;
import com.hunt.otziv.u_users.model.Marketolog;
import com.hunt.otziv.u_users.model.Operator;
import com.hunt.otziv.u_users.repository.ManagerRepository;
import com.hunt.otziv.u_users.repository.MarketologRepository;
import com.hunt.otziv.u_users.repository.OperatorRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

// README-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã)
/**
 * üì¶ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–æ–≤ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 *
 * üîÅ –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∫–∞ ‚Üí —Å–µ—Ä–≤–µ—Ä:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—ã—Ç–∏—è @TransactionalEventListener –∏ LeadEventPublisher
 * - –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è publishUpdate(lead)
 * - –õ–∏—Å—Ç–µ–Ω–µ—Ä —Å–æ–±–∏—Ä–∞–µ—Ç DTO –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PATCH-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * - –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç DTO, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –≤ –ë–î —á–µ—Ä–µ–∑ LeadMapper
 *
 * üîÑ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä ‚Üí –ª–æ–∫–∞–ª–∫–∞:
 * - –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ª–æ–∫–∞–ª–∫–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ª–∏–¥—ã —Å –ø–æ–º–æ—â—å—é GET /api/leads/modified?since=timestamp
 * - –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Å–∏–≤ LeadDtoTransfer[] –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç/–≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å–≤–æ—é –ë–î
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç JWT —Å subject="lead-sync"
 *
 * ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
 * - –í—Å–µ PATCH –∏ GET –∑–∞—â–∏—â–µ–Ω—ã JWT-—Ç–æ–∫–µ–Ω–∞–º–∏ (JwtAuthFilter)
 * - –ò–º–ø–æ—Ä—Ç —Å checksum-–∑–∞—â–∏—Ç–æ–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
 *
 * üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
 * - –õ–∏–¥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π telephoneLead –¥–ª—è upsert
 * - –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è
 */
@Slf4j
@RestController
@RequestMapping("/api/leads")
@RequiredArgsConstructor
public class LeadSyncController {

    private final LeadsRepository leadRepository;
    private final LeadMapper leadMapper;
    private final OperatorRepository operatorRepo;
    private final ManagerRepository managerRepo;
    private final MarketologRepository marketologRepo;
    private final TelephoneRepository telephoneRepo;

    @PostMapping(value = "/update", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Map<String, String>> updateLead(@RequestBody LeadUpdateDto dto) {
        log.info("üì• –ü–æ–ª—É—á–µ–Ω LeadUpdateDto: {}", dto);

        if (dto.getLeadId() == null) {
            return ResponseEntity.badRequest().body(Map.of("error", "Missing leadId"));
        }

        Lead lead = leadRepository.findById(dto.getLeadId()).orElse(null);
        if (lead == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Lead not found"));
        }

        Lead oldCopy = cloneLead(lead);
        leadMapper.updateEntity(lead, dto, operatorRepo, managerRepo, marketologRepo, telephoneRepo);
        leadRepository.save(lead);

        Map<String, String> changes = collectChangedFields(oldCopy, lead);
        log.info("‚úÖ –õ–∏–¥ #{} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", lead.getId());
        changes.forEach((key, value) -> log.info("üîÑ {}: {}", key, value));

        return ResponseEntity.ok(changes);
    }

    private Lead cloneLead(Lead original) {
        return Lead.builder()
                .id(original.getId())
                .telephoneLead(original.getTelephoneLead())
                .cityLead(original.getCityLead())
                .commentsLead(original.getCommentsLead())
                .lidStatus(original.getLidStatus())
                .createDate(original.getCreateDate())
                .updateStatus(original.getUpdateStatus())
                .dateNewTry(original.getDateNewTry())
                .offer(original.isOffer())
                .manager(original.getManager())
                .operator(original.getOperator())
                .marketolog(original.getMarketolog())
                .telephone(original.getTelephone())
                .build();
    }



    private Map<String, String> collectChangedFields(Lead oldLead, Lead newLead) {
        Map<String, String> changes = new LinkedHashMap<>();

        if (!Objects.equals(oldLead.getTelephoneLead(), newLead.getTelephoneLead())) {
            String change = oldLead.getTelephoneLead() + " ‚Üí " + newLead.getTelephoneLead();
            changes.put("üìû –¢–µ–ª–µ—Ñ–æ–Ω", change);
            log.info("üìû –¢–µ–ª–µ—Ñ–æ–Ω: {}", change);
        }

        if (!Objects.equals(oldLead.getCityLead(), newLead.getCityLead())) {
            String change = oldLead.getCityLead() + " ‚Üí " + newLead.getCityLead();
            changes.put("üåÜ –ì–æ—Ä–æ–¥", change);
            log.info("üåÜ –ì–æ—Ä–æ–¥: {}", change);
        }

        if (!Objects.equals(oldLead.getCommentsLead(), newLead.getCommentsLead())) {
            String change = oldLead.getCommentsLead() + " ‚Üí " + newLead.getCommentsLead();
            changes.put("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", change);
            log.info("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {}", change);
        }

        if (!Objects.equals(oldLead.getLidStatus(), newLead.getLidStatus())) {
            String change = oldLead.getLidStatus() + " ‚Üí " + newLead.getLidStatus();
            changes.put("üìã –°—Ç–∞—Ç—É—Å", change);
            log.info("üìã –°—Ç–∞—Ç—É—Å: {}", change);
        }


        if (!Objects.equals(oldLead.getManager(), newLead.getManager())) {
            String change = safeUserId(oldLead.getManager()) + " ‚Üí " + safeUserId(newLead.getManager());
            changes.put("üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", change);
            log.info("üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {}", change);
        }

        if (!Objects.equals(oldLead.getOperator(), newLead.getOperator())) {
            String change = safeUserId(oldLead.getOperator()) + " ‚Üí " + safeUserId(newLead.getOperator());
            changes.put("üéß –û–ø–µ—Ä–∞—Ç–æ—Ä", change);
            log.info("üéß –û–ø–µ—Ä–∞—Ç–æ—Ä: {}", change);
        }

        if (!Objects.equals(oldLead.getMarketolog(), newLead.getMarketolog())) {
            String change = safeUserId(oldLead.getMarketolog()) + " ‚Üí " + safeUserId(newLead.getMarketolog());
            changes.put("üìà –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", change);
            log.info("üìà –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥: {}", change);
        }

        return changes;
    }


    private void logChangedFields(Lead oldLead, Lead newLead) {
        if (!Objects.equals(oldLead.getTelephoneLead(), newLead.getTelephoneLead())) {
            log.info("üìû –¢–µ–ª–µ—Ñ–æ–Ω: {} ‚Üí {}", oldLead.getTelephoneLead(), newLead.getTelephoneLead());
        } else {
            log.debug("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {}", oldLead.getTelephoneLead());
        }

        if (!Objects.equals(oldLead.getCityLead(), newLead.getCityLead())) {
            log.info("üåÜ –ì–æ—Ä–æ–¥: {} ‚Üí {}", oldLead.getCityLead(), newLead.getCityLead());
        } else {
            log.debug("üåÜ –ì–æ—Ä–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {}", oldLead.getCityLead());
        }

        if (!Objects.equals(oldLead.getLidStatus(), newLead.getLidStatus())) {
            log.info("üìã –°—Ç–∞—Ç—É—Å: {} ‚Üí {}", oldLead.getLidStatus(), newLead.getLidStatus());
        } else {
            log.debug("üìã –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {}", oldLead.getLidStatus());
        }

        if (!Objects.equals(oldLead.getCommentsLead(), newLead.getCommentsLead())) {
            log.info("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {} ‚Üí {}", oldLead.getCommentsLead(), newLead.getCommentsLead());
        }else {
            log.debug("üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {}", oldLead.getCommentsLead());
        }

        if (!Objects.equals(oldLead.getUpdateStatus(), newLead.getUpdateStatus()))
            log.info("üïí –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {} ‚Üí {}", oldLead.getUpdateStatus(), newLead.getUpdateStatus());

        if (!Objects.equals(oldLead.getManager(), newLead.getManager()))
            log.info("üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {} ‚Üí {}", safeUserId(oldLead.getManager()), safeUserId(newLead.getManager()));

        if (!Objects.equals(oldLead.getOperator(), newLead.getOperator()))
            log.info("üéß –û–ø–µ—Ä–∞—Ç–æ—Ä: {} ‚Üí {}", safeUserId(oldLead.getOperator()), safeUserId(newLead.getOperator()));

        if (!Objects.equals(oldLead.getMarketolog(), newLead.getMarketolog()))
            log.info("üìà –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥: {} ‚Üí {}", safeUserId(oldLead.getMarketolog()), safeUserId(newLead.getMarketolog()));
    }


    private String safeUserId(Object obj) {
        if (obj == null) return "null";
        if (obj instanceof Manager manager) return "Manager#" + manager.getId();
        if (obj instanceof Operator operator) return "Operator#" + operator.getId();
        if (obj instanceof Marketolog marketolog) return "Marketolog#" + marketolog.getId();
        return "unknown";
    }
}