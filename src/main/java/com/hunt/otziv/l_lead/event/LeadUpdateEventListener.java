package com.hunt.otziv.l_lead.event;

import com.hunt.otziv.l_lead.dto.LeadUpdatedEvent;
import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.services.serv.LeadService;
import com.hunt.otziv.l_lead.services.serv.LeadTransferService;
import com.hunt.otziv.u_users.model.Manager;
import com.hunt.otziv.u_users.model.Operator;
import com.hunt.otziv.u_users.repository.ManagerRepository;
import com.hunt.otziv.u_users.repository.OperatorRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;
import org.springframework.transaction.event.TransactionalEventListener;
/**

    üîÑ –ü–æ—à–∞–≥–æ–≤–æ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

    1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–í —Ä–∞–±–æ—Ç–µ'"
    2. –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –º–µ–Ω—è–µ—Ç –ø–æ–ª–µ lead.lidStatus –∏ –≤—ã–∑—ã–≤–∞–µ—Ç leadService.save(lead)
    3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è leadEventPublisher.publishUpdate(lead)
    4. –°–æ–±—ã—Ç–∏–µ LeadUpdatedEvent –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å Spring‚Äô–∞
    5. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Spring –≤—ã–∑—ã–≤–∞–µ—Ç onLeadUpdated(...)
    6. –í–Ω—É—Ç—Ä–∏ listener-–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π Lead –∏–∑ –±–∞–∑—ã
    7. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è sendLeadUpdate(lead), –æ–Ω –º–∞–ø–∏—Ç—Å—è –≤ LeadUpdateDto –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    8. –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –¥–µ–ª–∞–µ—Ç—Å—è 3 –ø–æ–ø—ã—Ç–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    9. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç PATCH, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
**/

@Slf4j
@Component
@RequiredArgsConstructor
@ConditionalOnProperty(name = "lead.sync.outbound.enabled", havingValue = "true", matchIfMissing = false)
public class LeadUpdateEventListener {

    private final LeadService leadService;
    private final LeadTransferService leadTransferService;

    @PostConstruct
    public void init() {
        log.info("‚úÖ LeadUpdateEventListener –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    @TransactionalEventListener
    public void onLeadUpdated(LeadUpdatedEvent event) {
        Lead lead = leadService.findByIdOptional(event.leadId()).orElse(null);
        if (lead == null) return;

        leadTransferService.sendLeadUpdate(lead);
    }
}

