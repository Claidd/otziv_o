package com.hunt.otziv.l_lead.services;

import com.hunt.otziv.config.jwt.service.JwtService;
import com.hunt.otziv.l_lead.dto.LeadDtoTransfer;
import com.hunt.otziv.l_lead.dto.LeadUpdateDto;
import com.hunt.otziv.l_lead.mapper.LeadMapper;
import com.hunt.otziv.l_lead.model.Lead;
import com.hunt.otziv.l_lead.services.serv.LeadService;
import com.hunt.otziv.l_lead.services.serv.LeadTransferService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class LeadTransferServiceImpl implements LeadTransferService {

    private final RestTemplate restTemplate;
    private final JwtService jwtService;
    private final LeadService leadService;
    private final LeadMapper leadMapper;


    @Value("${lead.transfer.url}") // https://o-ogo.ru/api/leads/import
    private String remoteUrl;

    @Value("${lead.update.url}") // https://o-ogo.ru/api/leads/update
    private String remoteUpdateUrl;

    public void sendLeadToServer(Long leadId) {
        LeadDtoTransfer dto = leadService.findByIdToTransfer(leadId);
        String token = jwtService.generateToken(dto);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(token);

        HttpEntity<LeadDtoTransfer> request = new HttpEntity<>(dto, headers);
        restTemplate.postForEntity(remoteUrl, request, String.class);
    }

    public void sendLeadUpdate(Lead lead) {
        LeadUpdateDto dto = leadMapper.toUpdateDto(lead);
        String token = jwtService.generateSyncToken();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(List.of(MediaType.APPLICATION_JSON)); // üîß –Ø–≤–Ω–æ –æ–∂–∏–¥–∞–µ–º JSON
        headers.setBearerAuth(token);

        HttpEntity<LeadUpdateDto> entity = new HttpEntity<>(dto, headers);

        log.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ª–∏–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
//        log.info("üîé Lead ID: {}", lead.getId());
//        log.info("üìû –¢–µ–ª–µ—Ñ–æ–Ω: {}", lead.getTelephoneLead());
//        log.info("üìç –ì–æ—Ä–æ–¥: {}", lead.getCityLead());
//        log.info("üìã –°—Ç–∞—Ç—É—Å: {}", lead.getLidStatus());
//        log.info("üìÖ –û–±–Ω–æ–≤–ª—ë–Ω: {}", lead.getUpdateStatus());

        for (int attempt = 1; attempt <= 3; attempt++) {
            try {
                log.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ {}: –æ—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {}", attempt, remoteUpdateUrl);

                ResponseEntity<Map<String, String>> response = restTemplate.exchange(
                        remoteUpdateUrl,
                        HttpMethod.POST,
                        entity,
                        new ParameterizedTypeReference<>() {}
                );

                HttpStatus status = (HttpStatus) response.getStatusCode();
                if (status.is2xxSuccessful()) {
                    log.info("‚úÖ –£—Å–ø–µ—Ö! –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: {} {}", status.value(), status.getReasonPhrase());

                    Map<String, String> changes = response.getBody();
                    if (changes != null && !changes.isEmpty()) {
                        log.info("üì• –ü–æ–ª—É—á–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
                        changes.forEach((key, value) -> log.info("üîÑ {}: {}", key, value));
                    }
                    return;
                } else {
                    log.warn("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {} {}", status.value(), status.getReasonPhrase());
                    if (status.is3xxRedirection()) {
                        log.error("üîÅ –ü–æ–ª—É—á–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç ({}), —ç—Ç–æ –æ—à–∏–±–∫–∞!", status.value());
                    }
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {} –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ #{}: {}", attempt, lead.getId(), e.getMessage());
            }

            try {
                Thread.sleep(1000L * attempt);
            } catch (InterruptedException ignored) {
                log.warn("‚è∏ –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ");
            }
        }

        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏–¥ #{} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", lead.getId());
    }




//    leadEventPublisher.publishUpdate(lead, "–í —Ä–∞–±–æ—Ç–µ", lead.getManager(), null);

}
